[{"/home/amrit/Desktop/WebD/Sero/client/src/index.js":"1","/home/amrit/Desktop/WebD/Sero/client/src/store.js":"2","/home/amrit/Desktop/WebD/Sero/client/src/App.js":"3","/home/amrit/Desktop/WebD/Sero/client/src/reducers/userReducers.js":"4","/home/amrit/Desktop/WebD/Sero/client/src/Components/Footer.js":"5","/home/amrit/Desktop/WebD/Sero/client/src/Components/Header.js":"6","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Cart.js":"7","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Feedback.js":"8","/home/amrit/Desktop/WebD/Sero/client/src/Screens/UserList.js":"9","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Register.js":"10","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Login.js":"11","/home/amrit/Desktop/WebD/Sero/client/src/Screens/EateryList.js":"12","/home/amrit/Desktop/WebD/Sero/client/src/Screens/UserEdit.js":"13","/home/amrit/Desktop/WebD/Sero/client/src/reducers/cartReducers.js":"14","/home/amrit/Desktop/WebD/Sero/client/src/reducers/orderReducer.js":"15","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Home.js":"16","/home/amrit/Desktop/WebD/Sero/client/src/reducers/eateryReducers.js":"17","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Checkout.js":"18","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Payment.js":"19","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Dashboard.js":"20","/home/amrit/Desktop/WebD/Sero/client/src/Screens/DashboardMenu.js":"21","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Menu.js":"22","/home/amrit/Desktop/WebD/Sero/client/src/Screens/EateryEdit.js":"23","/home/amrit/Desktop/WebD/Sero/client/src/Screens/OrderSummary.js":"24","/home/amrit/Desktop/WebD/Sero/client/src/Screens/MyOrderList.js":"25","/home/amrit/Desktop/WebD/Sero/client/src/Components/Loader.js":"26","/home/amrit/Desktop/WebD/Sero/client/src/Components/Message.js":"27","/home/amrit/Desktop/WebD/Sero/client/src/Components/FormContainer.js":"28","/home/amrit/Desktop/WebD/Sero/client/src/constants/userConstants.js":"29","/home/amrit/Desktop/WebD/Sero/client/src/Components/Review.js":"30","/home/amrit/Desktop/WebD/Sero/client/src/actions/userActions.js":"31","/home/amrit/Desktop/WebD/Sero/client/src/Components/Eatery.js":"32","/home/amrit/Desktop/WebD/Sero/client/src/Components/Category.js":"33","/home/amrit/Desktop/WebD/Sero/client/src/constants/orderConstants.js":"34","/home/amrit/Desktop/WebD/Sero/client/src/constants/eateryConstants.js":"35","/home/amrit/Desktop/WebD/Sero/client/src/actions/cartActions.js":"36","/home/amrit/Desktop/WebD/Sero/client/src/constants/cartConstants.js":"37","/home/amrit/Desktop/WebD/Sero/client/src/actions/eateryActions.js":"38","/home/amrit/Desktop/WebD/Sero/client/src/Components/CheckoutSteps.js":"39","/home/amrit/Desktop/WebD/Sero/client/src/actions/orderActions.js":"40","/home/amrit/Desktop/WebD/Sero/client/src/Components/Item.js":"41","/home/amrit/Desktop/WebD/Sero/client/src/Components/PopUp.js":"42"},{"size":313,"mtime":1615124737709,"results":"43","hashOfConfig":"44"},{"size":2645,"mtime":1615124211904,"results":"45","hashOfConfig":"44"},{"size":2247,"mtime":1615124733504,"results":"46","hashOfConfig":"44"},{"size":3653,"mtime":1613998788593,"results":"47","hashOfConfig":"44"},{"size":1744,"mtime":1613998788541,"results":"48","hashOfConfig":"44"},{"size":3644,"mtime":1613998788545,"results":"49","hashOfConfig":"44"},{"size":5258,"mtime":1612513795094,"results":"50","hashOfConfig":"44"},{"size":1929,"mtime":1613998788557,"results":"51","hashOfConfig":"44"},{"size":3282,"mtime":1614184474803,"results":"52","hashOfConfig":"44"},{"size":4183,"mtime":1614254261808,"results":"53","hashOfConfig":"44"},{"size":2347,"mtime":1614249166261,"results":"54","hashOfConfig":"44"},{"size":4696,"mtime":1614327851707,"results":"55","hashOfConfig":"44"},{"size":5567,"mtime":1614185135662,"results":"56","hashOfConfig":"44"},{"size":2498,"mtime":1615124211904,"results":"57","hashOfConfig":"44"},{"size":4043,"mtime":1615124211904,"results":"58","hashOfConfig":"44"},{"size":4973,"mtime":1615124211900,"results":"59","hashOfConfig":"44"},{"size":3523,"mtime":1615124211904,"results":"60","hashOfConfig":"44"},{"size":3940,"mtime":1615124211900,"results":"61","hashOfConfig":"44"},{"size":6423,"mtime":1615124211900,"results":"62","hashOfConfig":"44"},{"size":14630,"mtime":1615132892217,"results":"63","hashOfConfig":"44"},{"size":10865,"mtime":1615187896362,"results":"64","hashOfConfig":"44"},{"size":4510,"mtime":1615124211900,"results":"65","hashOfConfig":"44"},{"size":11958,"mtime":1615183847825,"results":"66","hashOfConfig":"44"},{"size":13024,"mtime":1615124211900,"results":"67","hashOfConfig":"44"},{"size":3197,"mtime":1615124211900,"results":"68","hashOfConfig":"44"},{"size":458,"mtime":1612278171452,"results":"69","hashOfConfig":"44"},{"size":289,"mtime":1613317311422,"results":"70","hashOfConfig":"44"},{"size":331,"mtime":1612613038213,"results":"71","hashOfConfig":"44"},{"size":1483,"mtime":1613998788589,"results":"72","hashOfConfig":"44"},{"size":1906,"mtime":1615124211892,"results":"73","hashOfConfig":"44"},{"size":7586,"mtime":1614371832518,"results":"74","hashOfConfig":"44"},{"size":1287,"mtime":1615135744631,"results":"75","hashOfConfig":"44"},{"size":1683,"mtime":1613202578356,"results":"76","hashOfConfig":"44"},{"size":1754,"mtime":1615124211904,"results":"77","hashOfConfig":"44"},{"size":1477,"mtime":1615124211904,"results":"78","hashOfConfig":"44"},{"size":1369,"mtime":1615124211900,"results":"79","hashOfConfig":"44"},{"size":199,"mtime":1615124211904,"results":"80","hashOfConfig":"44"},{"size":5998,"mtime":1615124211900,"results":"81","hashOfConfig":"44"},{"size":1255,"mtime":1615124211884,"results":"82","hashOfConfig":"44"},{"size":6135,"mtime":1615124211900,"results":"83","hashOfConfig":"44"},{"size":3543,"mtime":1615124211892,"results":"84","hashOfConfig":"44"},{"size":334,"mtime":1615137463595,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"11jjbgq",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"88"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/amrit/Desktop/WebD/Sero/client/src/index.js",[],["184","185"],"/home/amrit/Desktop/WebD/Sero/client/src/store.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/App.js",["186"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport Home from './Screens/Home';\nimport Menu from './Screens/Menu';\nimport Cart from './Screens/Cart';\nimport Login from './Screens/Login';\nimport Register from './Screens/Register'\nimport Checkout from './Screens/Checkout';\nimport Payment from './Screens/Payment';\nimport Dashboard from './Screens/Dashboard';\nimport Feedback from './Screens/Feedback';\nimport DashboardMenu from './Screens/DashboardMenu';\nimport UserList from './Screens/UserList';\nimport UserEdit from './Screens/UserEdit';\nimport EateryList from './Screens/EateryList';\nimport EateryEdit from './Screens/EateryEdit';\nimport OrderSummary from './Screens/OrderSummary';\nimport MyOrderList from './Screens/MyOrderList';\nfunction App() {\n\n    return (\n      <Router>\n\n        <Header />\n\n        <main>\n\n          <Route path='/' component={Home} exact />\n\n          <Container>\n            <Route path = '/login' component={Login} />\n            <Route path = '/register' component={Register} />\n            <Route path = '/dashboard' component={Dashboard} />\n            <Route path = '/dashboardMenu' component={DashboardMenu} />\n            <Route path = '/menu/:id' component={Menu} exact />\n            <Route path = '/cart' component={Cart} />\n            <Route path = '/checkout' component={Checkout} />\n            <Route path = '/payment' component={Payment} />\n            <Route path = '/orderSummary/:id' component={OrderSummary} />\n            <Route path = '/myorders' component={MyOrderList} />\n            <Route path = '/feedback' component={Feedback} />\n            <Route path = '/admin/userlist' component={UserList} />\n            <Route path = '/admin/user/:id/edit' component={UserEdit} />\n            <Route path = '/admin/eatery/:id/edit' component={EateryEdit} />\n            <Route path = '/admin/eaterylist' component={EateryList} />\n          </Container>\n        </main>\n\n        <Footer />\n\n      </Router>\n    );\n}\n\nexport default App;\n","/home/amrit/Desktop/WebD/Sero/client/src/reducers/userReducers.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Components/Footer.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Components/Header.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/Cart.js",["187"],"import React, { useEffect } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, ListGroup, Button, Card, Container} from 'react-bootstrap'\nimport Message from '../Components/Message'\nimport { addToCart, removeFromCart } from '../actions/cartActions'\n\nconst Cart = ({history}) => {\n    const cart = useSelector(state=>state.cart)\n    const dispatch = useDispatch()\n    const {cartItems,eateryDetails}=cart\n    let browserHistory = useHistory();\n    const removeFromCartHandler = (id) =>{\n        dispatch(removeFromCart(id,eateryDetails))\n    }\n    const addToCartHandler = (item,qty) =>{\n        \n        const item1={\n            _id: item.product,\n            name: item.name,\n            cost: item.cost,\n            category: item.category,\n            image: item.image,\n            isAvailable: item.isAvailable,\n        }\n        dispatch(addToCart(item1,eateryDetails,qty))\n    }\n    const checkoutHandler =() =>{\n        history.push('/checkout')\n    }\n    return (\n        <React.Fragment>\n            <Container fluid>\n                <Row><Button className='mt-3' onClick={()=>browserHistory.goBack()}>Go Back</Button></Row>\n                <Row><h3>Your Cart<small class=\"text-muted\"> from {eateryDetails.name}</small></h3></Row>\n                {(cartItems.length === 0 || !eateryDetails) ? (\n                    <Message>\n                        Your cart is empty  <Button><Link to='/'>Order!</Link></Button>\n                    </Message>\n                ):(\n                    <div>\n                    <Row md={1} lg={1} xl={1} noGutters={true}>   \n                        \n                        <ListGroup>\n                            \n                            {cartItems.map((item) => (\n                            <ListGroup.Item key={item.product}>\n                                <Row>\n                                \n                                <Col md={4} xs={3} mx-auto align='center'>\n                                    {item.name}\n                                </Col>\n                                \n                                <Col md={4} xs={5} mx-auto align='center'>\n                                <Button size='sm' className='mx-2' onClick={()=> {\n                                        addToCartHandler(item,item.qty-1)\n                                        }} disabled={item.qty===0}>\n                                            <i class=\"fas fa-chevron-left\"></i>\n                                    </Button>\n                                    \n                                    {item.qty}\n                                \n                                    <Button size='sm' className='mx-2' onClick={()=> {\n                                        addToCartHandler(item,item.qty+1)\n                                        }}>\n                                            <i class=\"fas fa-chevron-right\"></i>\n                                    </Button>\n                                </Col >\n                                <Col xs={2} md={1}  align='center'>₹{item.cost*item.qty}</Col>\n                                <Col md={2} xs={1} align='center'>\n                                    <Button\n                                    size='sm' mx-0\n                                    onClick={() => removeFromCartHandler(item.product)}\n                                    >\n                                        <i className='fas fa-trash'></i>\n                                    </Button>\n                                </Col>\n                                \n                                \n                                </Row>\n                            </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    </Row>\n\n                    <Row className='my-4'>\n\n                        <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item >\n                            <h4>\n                                Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\n                                items\n                            </h4>\n                            ₹\n                            {cartItems\n                                .reduce((acc, item) => acc + item.qty * item.cost, 0)\n                                .toFixed(2)}\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Button\n                                    type='button'\n                                    className='btn-block'\n                                    disabled={cartItems.length === 0 || !eateryDetails}\n                                    onClick={checkoutHandler}\n                                >\n                                    Proceed To Checkout\n                                </Button>\n                            </ListGroup.Item>\n                        </ListGroup>\n                        </Card>\n                        \n                    </Row>\n                </div>\n                )}\n                \n            </Container>\n        </React.Fragment>\n        \n        \n    )\n}\n\nexport default Cart\n","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Feedback.js",["188"],"import React, { useEffect} from 'react';\nimport randomColor from 'randomcolor';\n// import { Row, Col, Container, InputGroup, FormControl } from 'react-bootstrap';\nimport Review from '../Components/Review';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../Components/Loader';\nimport Message from '../Components/Message';\nimport { getEateryReviews } from '../actions/eateryActions'\nimport { LinkContainer } from 'react-router-bootstrap';\nimport {Button, Container} from 'react-bootstrap'\n\n\nconst Feedback = ({history}) =>{\n    const dispatch = useDispatch();\n    const userLogin = useSelector((state) => state.userLogin)\n    const { userInfo } = userLogin\n    const reviewList = useSelector(state => state.eateryReviews);\n    const {error, loading, reviews} = reviewList;\n    \n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        }\n        else{\n            if(userInfo.eatery){\n                dispatch(getEateryReviews(userInfo.eatery));\n            }\n        }\n    }, [dispatch, history, userInfo]);\n    \n    return(\n        <div>\n                <LinkContainer to='/dashboard' className='my-3'>\n                    <Button variant='secondary'>Back</Button>\n                </LinkContainer>\n                <h2>Feedback and Complaints</h2>\n            { loading? ( <Loader /> ) : error?  (<Message variant='danger'>{ error }</Message>) :\n            (\n                reviews.map((review) => {\n                    return(\n                        <Review \n                            name={review.name}\n                            email={review.email}\n                            comment={review.comment}\n                            rating={review.rating}\n                            color={randomColor()}\n                        />\n                    )\n                })\n            )\n            }\n            \n        </div>\n    )\n}\n\nexport default Feedback","/home/amrit/Desktop/WebD/Sero/client/src/Screens/UserList.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/Register.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/Login.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/EateryList.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/UserEdit.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/reducers/cartReducers.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/reducers/orderReducer.js",["189"],"import { ORDER_CANCEL_FAIL, ORDER_CANCEL_REQUEST, ORDER_CANCEL_RESET, ORDER_CANCEL_SUCCESS, ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_RESET, ORDER_CREATE_SUCCESS, ORDER_COMPLETED_FAIL, ORDER_COMPLETED_REQUEST, ORDER_COMPLETED_RESET, ORDER_COMPLETED_SUCCESS, ORDER_DETAILS_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_LIST_MY_FAIL, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_RESET, ORDER_LIST_MY_SUCCESS, ORDER_PAY_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_RESET, ORDER_PAY_SUCCESS, ORDER_PAYMENT_DONE_SUCCESS, ORDER_PAYMENT_DONE_REQUEST, ORDER_PAYMENT_DONE_FAIL, ORDER_PAYMENT_DONE_RESET } from \"../constants/orderConstants\"\n\n  \n  export const orderCreateReducer = (state = {}, action) => {\n    switch (action.type) {\n      case ORDER_CREATE_REQUEST:\n        return { loading: true }\n      case ORDER_CREATE_SUCCESS:\n        return { loading: false, success: true, order: action.payload }\n      case ORDER_CREATE_FAIL:\n        return { loading: false, error: action.payload }\n      case ORDER_CREATE_RESET:\n        return {}\n      default:\n        return state\n    }\n}\n\nexport const orderDetailsReducer = (\n  state = { loading: true, orderItems: [], customerMeta: {} },\n  action\n) => {\n  switch (action.type) {\n    case ORDER_DETAILS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      }\n    case ORDER_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        order: action.payload,\n      }\n    case ORDER_DETAILS_FAIL:\n      return {\n        loading: false,\n        error: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nexport const orderListMyReducer = (state = { orders: [] }, action) => {\n  switch (action.type) {\n    case ORDER_LIST_MY_REQUEST:\n      return {\n        loading: true,\n      }\n    case ORDER_LIST_MY_SUCCESS:\n      return {\n        \n        loading: false,\n        orders: action.payload,\n      }\n    case ORDER_LIST_MY_FAIL:\n      return {\n        loading: false,\n        error: action.payload,\n      }\n    case ORDER_LIST_MY_RESET:\n      return { orders: [] }\n    default:\n      return state\n  }\n}\n\nexport const orderPayReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_PAY_REQUEST:\n      return {\n        loading: true,\n      }\n    case ORDER_PAY_SUCCESS:\n      return {\n        order: action.payload,\n        loading: false,\n        success: true,\n      }\n    case ORDER_PAY_FAIL:\n      return {\n        loading: false,\n        error: action.payload,\n      }\n    case ORDER_PAY_RESET:\n      return {}\n    default:\n      return state\n  }\n}\n\nexport const orderCompleteReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_COMPLETED_REQUEST:\n      return {\n        loading: true,\n      }\n    case ORDER_COMPLETED_SUCCESS:\n      return {\n        order: action.payload,\n        loading: false,\n        success: true,\n      }\n    case ORDER_COMPLETED_FAIL:\n      return {\n        loading: false,\n        error: action.payload,\n      }\n    // case ORDER_COMPLETED_RESET:\n    //   return {}\n    default:\n      return state\n  }\n}\n\nexport const orderCancelReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_CANCEL_REQUEST:\n      return {\n        loading: true,\n      }\n    case ORDER_CANCEL_SUCCESS:\n      return {\n        order: action.payload,\n        loading: false,\n        success: true,\n      }\n    case ORDER_CANCEL_FAIL:\n      return {\n        loading: false,\n        error: action.payload,\n      }\n    case ORDER_CANCEL_RESET:\n      return {}\n    default:\n      return state\n  }\n}\n\nexport const orderCustomerPaidReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ORDER_PAYMENT_DONE_REQUEST:\n      return {\n        loading: true,\n      }\n    case ORDER_PAYMENT_DONE_SUCCESS:\n      return {\n        order: action.payload,\n        loading: false,\n        success: true,\n      }\n    case ORDER_PAYMENT_DONE_FAIL:\n      return {\n        loading: false,\n        error: action.payload,\n      }\n    case ORDER_PAYMENT_DONE_RESET:\n      return {}\n    default:\n      return state\n  }\n}","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Home.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/reducers/eateryReducers.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/Checkout.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/Payment.js",["190"],"import React, { useState, useEffect } from 'react'\nimport io from 'socket.io-client'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Col,Button, ListGroup, Tab, Row} from 'react-bootstrap'\n// import {saveCustomerMeta} from '../actions/cartActions'\nimport FormContainer from '../Components/FormContainer'\nimport CheckoutSteps from '../Components/CheckoutSteps'\nimport Message from '../Components/Message'\nimport {createOrder} from '../actions/orderActions'\nimport { Link } from 'react-router-dom'\nimport {ORDER_CREATE_RESET} from '../constants/orderConstants'\n\nlet socket\n\nconst Payment = ({history}) => {\n    const [paymentMethod, setPaymentMethod] = useState('null')\n  \n    const cart = useSelector(state=>state.cart)\n    const {cartItems, eateryDetails, customerMeta}=cart\n\n    const dispatch = useDispatch()\n    \n    const ENDPOINT ='localhost:5000'\n\n    const orderCreate = useSelector((state) => state.orderCreate)\n    const { order, success, error } = orderCreate\n    \n    useEffect(() => {\n        socket =io.connect(ENDPOINT, {reconnect: true})\n        if(!customerMeta){\n            history.push('/checkout');\n        }\n        else{\n            if (success) {\n                \n                socket.emit('orderPlaced')\n                //console.log(\"Order is created but wait for confirmation\")\n                history.push(`/orderSummary/${order._id}`)\n                dispatch({ type: ORDER_CREATE_RESET })\n            }\n        }\n        return () => {\n            //socket.emit('disconnect')\n            socket.off()\n        }\n\n    }, [history, customerMeta, success, eateryDetails, ENDPOINT])\n\n    //   Calculate prices\n    const addDecimals = (num) => {\n        return (Math.round(num * 100) / 100).toFixed(2)\n    }\n\n    cart.itemsPrice = addDecimals(\n        cartItems.reduce((acc, item) => acc + item.cost * item.qty, 0)\n    )\n\n    cart.taxPrice = addDecimals(Number((0.05 * cart.itemsPrice).toFixed(2)))\n    cart.totalPrice = (\n        Number(cart.itemsPrice) +\n        Number(cart.taxPrice)\n    ).toFixed(2)\n\n\n    \n    const placeOrderHandler = () => {\n\n        \n\n            dispatch(\n              createOrder({\n                eateryId: eateryDetails._id,\n                customerMeta: {\n                    name: customerMeta.name,\n                    phone: customerMeta.phone,\n                    email: customerMeta.email\n                },\n                orderItems: cart.cartItems,\n                paymentMethod: paymentMethod,\n                itemsPrice: cart.itemsPrice,\n                paymentType: cart.customerMeta.paymentType,\n                taxPrice: cart.taxPrice,\n                totalPrice: cart.totalPrice,\n              })\n            )\n        \n    }\n\n\n    \n    \n    return (\n        <>\n            <CheckoutSteps step1 step2/>\n            <FormContainer>\n                <h2>Payment</h2>\n            \n                <ListGroup variant='flush'>\n                    <ListGroup.Item>\n                        \n                        <p>\n                            <strong>Customer Details: </strong> <br />\n                            {customerMeta.name}<br />\n                            {customerMeta.phone}\n                        </p>   \n                    </ListGroup.Item>\n                    <h4 className=\"py-3\">Order from <Link to={`/menu/${eateryDetails._id}`}>\n                            {eateryDetails.name}</Link>\n                    </h4>\n                    <ListGroup.Item>\n                        <Row>\n                        <Col>Items</Col>\n                        <Col>₹{cart.itemsPrice}</Col>\n                        </Row>\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <Row>\n                        <Col>GST</Col>\n                        <Col>₹{cart.taxPrice}</Col>\n                        </Row>\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <Row>\n                        <Col>Total</Col>\n                        <Col>₹{cart.totalPrice}</Col>\n                        </Row>\n                    </ListGroup.Item>\n                    {customerMeta.paymentType==='payNow'?(\n                        <ListGroup.Item>\n                            <Tab.Container id=\"list-group-tabs-example\">\n                                <Row>\n                                    <Col sm={6}>\n                                    <ListGroup>\n                                        <ListGroup.Item action href=\"#link1\" onClick={(e)=>setPaymentMethod('UPI')}>\n                                        UPI\n                                        </ListGroup.Item>\n                                        <ListGroup.Item action href=\"#link2\" onClick={(e)=>setPaymentMethod('PayTM')}>\n                                        PayTM\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                    </Col>\n                                    <Col sm={6}>\n                                    <Tab.Content>\n                                        <Tab.Pane eventKey=\"#link1\">\n                                        <h6>{eateryDetails.upi}</h6>\n                                        </Tab.Pane>\n                                        <Tab.Pane eventKey=\"#link2\">\n                                        <h6>{eateryDetails.paytm}</h6>\n                                        </Tab.Pane>\n                                    </Tab.Content>\n                                    </Col>\n                                    \n                                </Row>\n                            </Tab.Container>\n                        </ListGroup.Item>\n                    ):(\n                        null\n                    )}\n                    \n\n                </ListGroup>\n                <ListGroup.Item>\n                {error && <Message variant='danger'>{error}</Message>}\n                </ListGroup.Item>\n                <Button\n                    type='button'\n                    className='btn-block'\n                    disabled={cartItems.length === 0 || !eateryDetails || (paymentMethod==='null' && cart.customerMeta.paymentType==='payNow')}\n                    onClick={placeOrderHandler}\n                >\n                    Place Order\n                </Button>         \n            </FormContainer>\n\n            \n        </>\n    )\n}\n\nexport default Payment\n\n\n","/home/amrit/Desktop/WebD/Sero/client/src/Screens/Dashboard.js",["191","192","193"],"import React, {useEffect, useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, Container, Card, Form, Button, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\nimport Loader from '../Components/Loader';\nimport Message from '../Components/Message';\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { listEateryDetails} from '../actions/eateryActions'\nimport io from 'socket.io-client'\nimport { payOrder, completeOrder, cancelOrder, listMyOrders} from '../actions/orderActions'\nimport { ORDER_PAY_RESET, ORDER_COMPLETED_RESET, ORDER_CANCEL_RESET } from '../constants/orderConstants';\nimport { LinkContainer } from 'react-router-bootstrap';\n\n\nlet socket\n\nconst Dashboard = ({history}) => {\n\n    // for all update work\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [phoneNumber, setPhoneNumber] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState(null)\n    \n\n\n    const userDetails = useSelector((state) => state.userDetails)\n    const { loading, error, user } = userDetails \n    \n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const dispatch = useDispatch()\n\n    const eateryDetails = useSelector(state => state.eateryDetails) \n    const {loading:loadingEatery, error: errorEatery} = eateryDetails\n\n\n    const  userUpdateProfile = useSelector(state => state.userUpdateProfile) \n    const { success, loading: updateLoading } = userUpdateProfile\n\n    const  orderListMy = useSelector(state => state.orderListMy) \n    const { loading: loadingOrders, error: errorOrders, orders  } = orderListMy\n    \n    const ENDPOINT ='localhost:5000'\n\n    const orderPay = useSelector((state) => state.orderPay)\n    const { order: orderPaid, loading: loadingPay, success: successPay, error: errorPay } = orderPay\n\n    const orderComplete = useSelector((state) => state.orderComplete)\n    const { order: orderCompleted, loading: loadingComplete, success: successComplete, error: errorComplete } = orderComplete\n\n    const orderCancel = useSelector((state) => state.orderCancel)\n    const { order: orderCancelled, loading: loadingCancel, success: successCancel, error: errorCancel } = orderCancel\n\n    useEffect(() => {\n        socket = io.connect(ENDPOINT, {reconnect: true})\n        if (!userInfo) {\n            history.push('/login')\n        }\n        else{\n            if(!user.name || user.name!==userInfo.name){\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            }\n            else{\n                setName(user.name)\n                setEmail(user.email)\n                setPhoneNumber(user.phoneNumber)\n                dispatch(listEateryDetails(user.eatery))  \n            }\n        }\n        if(successPay){\n            const orderPaidId=orderPaid._id\n            socket.emit('paid', {orderPaidId})\n            dispatch(listMyOrders())\n            dispatch({ type: ORDER_PAY_RESET })  \n        }\n        else if(successCancel){\n            const orderCancelledId=orderCancelled._id\n            socket.emit('cancelled', {orderCancelledId})\n            dispatch(listMyOrders())\n            dispatch({ type: ORDER_CANCEL_RESET })\n        }\n        else if(successComplete){\n            const orderCompletedId=orderCompleted._id\n            socket.emit('completed', {orderCompletedId})\n            dispatch(listMyOrders())\n            dispatch({ type: ORDER_COMPLETED_RESET })\n        }\n        socket.on('customerPaidOrder', ({eateryIdforSocket})=>{\n            if(eateryIdforSocket===userInfo.eatery){\n              dispatch(listMyOrders())\n            }\n        }) \n        socket.on('refreshOrders', ()=>{\n              dispatch(listMyOrders())\n        }) \n        return () => {\n            //socket.emit('disconnect')\n            socket.off()\n        }\n    }, [dispatch, history, userInfo, user, success, ENDPOINT, successPay, successComplete, successCancel])\n\n    const submitHandler = (e) => {\n\n        e.preventDefault()\n\n        if(password !== confirmPassword) {\n\n            setMessage('Passwords do not match')\n        } else {\n            // update profile\n            dispatch(updateUserProfile({id:user._id, name, email, phoneNumber, password}))\n        }\n\n    }\n\n    const payHandler = (order) =>{\n        dispatch(payOrder(order))\n    }\n\n    const cancelHandler = (order) =>{\n        dispatch(cancelOrder(order))\n    }\n\n    const completeHandler = (order) =>{\n        dispatch(completeOrder(order))\n    }\n\n    return (\n        <>\n            <Row><h1>Dashboard</h1></Row>\n            <Row>\n                <Col md={3}>\n                    { message && <Message variant='danger'>{ message }</Message>}\n                    { error && <Message variant='danger'>{ error }</Message>}\n                    { success && <Message variant='success'>Successfully Updated</Message>}\n                    { loading && <Loader />}\n                    { updateLoading && <Loader />}\n                    <Form onSubmit={submitHandler}>\n\n                        <Form.Group controlId='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='Enter name'\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='email'>\n                            <Form.Label>Email Address</Form.Label>\n                            <Form.Control\n                                type='email'\n                                placeholder='Enter email'\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='phoneNumber'>\n                            <Form.Label>Phone Number</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='Enter phone number'\n                                value={phoneNumber}\n                                onChange={(e) => setPhoneNumber(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='password'>\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type='password'\n                                placeholder='Enter password'\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='confirmPassword'>\n                            <Form.Label>Confirm password</Form.Label>\n                            <Form.Control\n                                type='password'\n                                placeholder='Enter confirm password'\n                                value={confirmPassword}\n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Button type='submit' variant='primary'>Update</Button>\n                    </Form>\n                </Col>\n                <Col md={9}>\n                    <Container className='py-3'>\n                        { errorEatery && <Message variant='danger'>{ errorEatery }</Message>}\n                        { loadingEatery && <Loader />}\n                        <Row>\n                            <Col>\n                                {userInfo && (\n                                    <Link to='/dashboardMenu'>\n                                        <Card style={{ height: '6rem', width: '10rem' }}>\n                                            <Card.Body>\n                                                <Card.Title> Menu </Card.Title>\n                                            </Card.Body>\n                                        </Card>\n                                    </Link>\n                                )}  \n                            </Col>\n                        \n                            <Col>\n                                <Link to='/feedback'>\n                                    <Card style={{ height: '6rem', width: '10rem' }}>\n                                        <Card.Body>\n                                            <Card.Title> Feedback </Card.Title>\n                                        </Card.Body>\n                                    </Card>\n                                </Link>\n                            </Col>\n\n                            <Col>\n                                <Link to='/myorders'>\n                                    <Card style={{ height: '6rem', width: '10rem' }}>\n                                        <Card.Body>\n                                            <Card.Title> Past Orders </Card.Title>\n                                        </Card.Body>\n                                    </Card>\n                                </Link>\n                            </Col>\n\n                            <Col>\n                                <Link to={{ pathname: `/admin/eatery/${user.eatery}/edit`}}>\n                                    <Card style={{ height: '6rem', width: '10rem' }}>\n                                        <Card.Body>\n                                            <Card.Title> Manage Eatery </Card.Title>\n                                        </Card.Body>\n                                    </Card>\n                                </Link>\n                            </Col>\n                        </Row>\n                        <Container>\n                            {loadingOrders? <Loader /> : errorOrders? <Message variant='danger'>{errorOrders}</Message>:(\n                                <div>\n                                    <h2>Current Orders</h2>\n                                    { (loadingPay || loadingCancel || loadingComplete) && <Loader />}\n                                    { errorPay && <Message variant='danger'>{ errorPay }</Message>}\n                                    <Table striped bordered hover responsive className='table-sm'>\n                                        <thead>\n                                            <tr>\n                                            <th>STATUS</th>\n                                            <th>NAME</th>\n                                            <th>PHONE</th>\n                                            <th>DATE</th>\n                                            <th>TOTAL</th>\n                                    \n                                            <th>MODE</th>\n                                            <th>COMPLETE</th>\n                                            <th>INFO</th>\n                                            <th></th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {orders.map((order) => (\n                                                !order.completed?(\n                                                    <tr key={order._id}>\n                                                    <td>{order.paymentType===\"payNow\"?(\n                                                        order.isPaid?<i class=\"fas fa-check-circle\"></i>\n                                                        :<Button className='btn-sm' onClick={()=>payHandler(order)}>Paid</Button>\n                                                    ):\n                                                        (order.paymentMethod!=='null'?(\n                                                            order.isPaid?<i class=\"fas fa-check-circle\"></i>\n                                                            :<Button className='btn-sm' onClick={()=>payHandler(order)}>Paid</Button> \n                                                        ):(\n                                                            'Progress'\n                                                        ))}</td>\n                                                    {/* <td><Button className='btn-sm' onClick={()=>payHandler(order)}>Paid</Button></td> */}\n                                                    <td>{order.customerMeta.name}</td>\n                                                    <td>{order.customerMeta.phone}</td>\n                                                    <td>{order.createdAt.substring(0,10)}</td>\n                                                    <td>₹{order.totalPrice}</td>\n                                                    \n                                                    <td>{order.paymentMethod}</td>\n                                                    <td>{order.completed?'Completed':(<Button className='btn-sm' variant='success' disabled={!order.isPaid} onClick={()=>completeHandler(order)}>Complete</Button>)}</td> \n                                                    <td><LinkContainer to={`/orderSummary/${order._id}`}>\n                                                    <Button className='btn-sm' variant='light'><i class=\"fas fa-info-circle\"></i></Button>\n                                                        </LinkContainer>\n                                                    </td> \n                                                    <td>{order.cancelled?'Cancelled':(<Button className='btn-sm' variant='danger' disabled={order.isPaid} onClick={()=>cancelHandler(order)}>Cancel</Button>)}</td> \n                                                </tr>\n                                                ):(null)\n                                            \n                                            ))}\n                                        </tbody>\n                                    </Table>\n                                </div>\n                            )}\n                            \n                        </Container>\n                    </Container>\n                </Col>\n                \n            </Row>\n        </>\n    );\n}\n\nexport default Dashboard;","/home/amrit/Desktop/WebD/Sero/client/src/Screens/DashboardMenu.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/Menu.js",["194","195","196"],"import React, {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport { Row, Col, Image, ListGroup, Form, Button} from 'react-bootstrap'\n\nimport { listEateryDetails} from '../actions/eateryActions'\nimport Loader from '../Components/Loader';\nimport Message from '../Components/Message';\nimport StarRatings from 'react-star-ratings';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\n\nimport Category from '../Components/Category';\n\n//import axios from 'axios'\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      maxWidth: 1080,\n      backgroundColor: 'black',\n     \n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }));\n\nfunction groupBy(objectArray, property) {\n    return objectArray.reduce((acc, obj) => {\n       const key = obj[property];\n       if (!acc[key]) {\n          acc[key] = [];\n       }\n       // Add object to list for given key's value\n       acc[key].push(obj);\n       return acc;\n    }, {});\n }\n\nconst Menu = ({match}) => {\n    // match.params.id or match.params. anything that is in the url\n    //const eatery = eateries.find(p=>p._id===match.params.id)\n    //const [eatery,setEatery] = useState({})\n\n    const dispatch = useDispatch()\n\n    const  eateryDetails = useSelector(state => state.eateryDetails) // call whatever you call in the store\n    const {loading, error, eatery} = eateryDetails\n\n    useEffect(()=>{\n          dispatch(listEateryDetails(match.params.id))\n    },[dispatch, match])\n\n    const classes = useStyles();\n    return (\n        <div>\n            <Link className=\"btn btn-secondary my-3\" to=\"/\">Go Back</Link>\n            {loading? (\n                <Loader /> \n                )\n            :   error ?(\n                <Message variant='danger'>{error}</Message>\n                ) \n            :   (\n                <>\n                    <Row>\n                        <Col md={6}>\n                            <Image src={eatery.image} alt={eatery.name } fluid />\n                        </Col>\n                        <Col md={6}>\n                            <ListGroup variant='flush'>\n                                <ListGroup.Item>\n                                <h3>{eatery.name}</h3>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                Description: {eatery.description}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                <StarRatings\n                                    rating={eatery.rating}\n                                    starRatedColor=\"#FFDF00\"\n                                    starEmptyColor=\"#585858\"\n                                    starDimension=\"2rem\"\n                                    starSpacing=\"5px\"\n                                />\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                {eatery.isOpen? null : (<Message variant='danger'>Restaurant is closed, try after sometime</Message>)}\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                    <h2 className='menu-title py-3'>Menu</h2>\n                    </Row>\n                    \n                    <List\n                    component=\"nav\"\n                    aria-labelledby=\"nested-list-subheader\"\n                    subheader={\n                        <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{color: 'white'}}>\n                        Category\n                        </ListSubheader>\n                    }\n                    className={classes.root}\n                    >\n                        \n                        {   \n                            Object.entries(groupBy(eatery.menu, \"category\")).map(([key, value]) => {\n                                return(\n                                    <Category name={key} menu={value} />\n                                )\n                            })\n                        }\n                    </List>\n\n                </>\n\n\n\n                \n            \n                )\n            \n            }\n            \n            \n        </div>\n    );\n}\n\nexport default Menu;\n\n","/home/amrit/Desktop/WebD/Sero/client/src/Screens/EateryEdit.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Screens/OrderSummary.js",["197","198","199","200","201"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport io from 'socket.io-client'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, ListGroup, Image, Card, Button,Tab, Form } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../Components/Loader';\nimport Message from '../Components/Message';\nimport {\n  getOrderDetails,\n  paymentDone,\n} from '../actions/orderActions'\nimport {\n  listEateryDetails,\n  createEateryReview\n} from '../actions/eateryActions'\nimport { ORDER_PAYMENT_DONE_RESET } from '../constants/orderConstants'\nimport { CART_RESET } from '../constants/cartConstants'\nimport {EATERY_CREATE_REVIEW_RESET} from '../constants/eateryConstants'\n\n\n\nlet socket\nconst OrderSummary = ({ match}) => {\n  const orderId = match.params.id\n  //const [eateryID, setEateryID] = useState('')\n  //const [name, setName] = useState('')\n  //const [email, setEmail] = useState('')\n  const [reviewDone, setReviewDone] = useState(false)\n  const [rating, setRating] = useState(0)\n  const [comment, setComment] = useState('')\n  const dispatch = useDispatch()\n\n  const orderDetails = useSelector((state) => state.orderDetails)\n  const { order, loading, error } = orderDetails\n\n  const eateryCreateReview = useSelector(state => state.eateryCreateReview)\n  const {success: successEateryReview, error: errorEateryReview} = eateryCreateReview\n\n  const eateryDetails = useSelector((state) => state.eateryDetails)\n  const {loading:eateryLoading, error: eateryError, eatery} = eateryDetails\n\n  const [paymentMethod, setPaymentMethod] = useState('null')\n\n\n  const orderCustomerPaid = useSelector((state) => state.orderCustomerPaid)\n  const { loading: loadingPay, success: successPay, error: errorPay } = orderCustomerPaid\n\n  if (!loading) {\n    //   Calculate prices\n    const addDecimals = (num) => {\n      return (Math.round(num * 100) / 100).toFixed(2)\n    }\n\n    order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.cost * item.qty, 0)\n    )\n    //setEateryID(order.eatery)\n    // setName(order.customerMeta.name)\n    // setEmail(order.customerMeta.email)\n  }\n\n  // const email = order.customerMeta.email;\n  // const name = order.customerMeta.name;\n  const ENDPOINT ='localhost:5000'\n\n  useEffect(() => {\n    socket =io.connect(ENDPOINT, {reconnect: true})\n    \n    if (!order  || order._id !== orderId) {\n \n      dispatch(getOrderDetails(orderId))\n      \n    }  \n    else if(!eatery){\n      dispatch(listEateryDetails(order.eatery))\n    } \n    //console.log(socket)\n    console.log(successPay)\n    if(successPay){\n      const eateryIdforSocket=order.eatery\n      dispatch(getOrderDetails(orderId))\n      socket.emit('customerPaid',{eateryIdforSocket})\n      dispatch({ type: ORDER_PAYMENT_DONE_RESET }) \n    }\n\n\n\n    socket.on('paidOrder', ({orderPaidId})=>{\n      // console.log(orderPaidId)\n      if(orderPaidId===orderId){\n        // console.log('Paid for your Order')\n        dispatch(getOrderDetails(orderId))\n      }\n    }) \n    socket.on('cancelledOrder', ({orderCancelledId})=>{\n      // console.log(orderCancelledId)\n      if(orderCancelledId===orderId){\n        // console.log('Cancelled for your Order')\n        dispatch(getOrderDetails(orderId))\n      }\n    })\n    socket.on('completedOrder', ({orderCompletedId})=>{\n      // console.log(orderCompletedId)\n      if(orderCompletedId===orderId){\n        // console.log('Completed for your Order')\n        dispatch(getOrderDetails(orderId))\n        // dispatch({type: CART_RESET})\n      }\n    })\n\n    if(successEateryReview){\n      alert(\"Review Submitted\")\n      setRating(0)\n      setComment('')\n      setReviewDone(true)\n      dispatch({type: EATERY_CREATE_REVIEW_RESET})\n  }\n\n    return () => {\n      //socket.emit('disconnect')\n      socket.off()\n    }\n    \n  }, [dispatch, orderId, order, ENDPOINT,eatery,successPay, successEateryReview])\n\nconst submitHandler = (e) => {\n  e.preventDefault()\n  dispatch(createEateryReview(order.eatery, {\n      name: order.customerMeta.name,\n      email: order.customerMeta.email,\n      rating,\n      comment,\n      orderId\n  }))\n}\n\n  const paymentHandler = () =>{\n    dispatch(paymentDone({\n        _id: orderId,\n        paymentMethod: paymentMethod\n    }\n    ))\n  }\n\n  return loading ? (\n    <Loader />\n  ) : error ? (\n    <Message variant='danger'>{error}</Message>\n  ) : (\n    <>\n      <h2>Order Summary {order._id}</h2>\n      <Row>\n        <Col md={8}>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h3>Details</h3>\n              <Row>\n                <Col>\n                    <p>\n                        <strong>Name: </strong> {order.customerMeta.name}\n                    </p>  \n                </Col>\n                <Col>\n                    <p>\n                        <strong>Phone: </strong> {order.customerMeta.phone}\n                    </p> \n                </Col>\n                <Col>\n                    <p>\n                        <strong>Email: </strong> <a href={`mailto:${order.customerMeta.email}`}>{order.customerMeta.email}</a>\n                    </p> \n                </Col>\n              </Row>\n              <Row>\n                  <Col>\n                    <p>\n                        <strong>Eatery: </strong> <Link to={`/menu/${order.eatery}`}>\n                            {eatery.name}</Link>\n                    </p>\n                  </Col>\n              </Row>\n            \n              \n              {order.completed ? (\n                <Message variant='success'>\n                  Completed on {order.completedAt.substring(0,10)}\n                </Message>\n              ) : (\n                <Message variant='primary'>In Progress</Message>\n              )}\n              {order.cancelled ? (\n                <Message variant='danger'>Order Cancelled</Message>\n              ) : (\n                null\n              )}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h3>Payment Method</h3>\n              <Row>\n                <Col>\n                    <p>\n                        <strong>Type: </strong>\n                        {order.paymentType}\n                    </p>  \n                </Col>\n                {order.paymentMethod!=='null'?(\n                  <Col>\n                      <p>\n                          <strong>Mode: </strong>\n                          {order.paymentMethod}\n                      </p>  \n                  </Col>\n                ):null}\n              </Row>\n              \n              {order.isPaid ? (\n                <Message variant='success'>Paid on {order.paidAt.substring(0,10)}</Message>\n              ) : (\n                <Message variant='danger'>Not Paid</Message>\n              )}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h3>Order Items</h3>\n              {order.orderItems.length === 0 ? (\n                <Message>Order is empty</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {order.orderItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        \n                        <Col>\n                            {item.name}\n                        </Col>\n                        <Col>\n                            {item.category}\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ₹{item.cost} = ₹{item.qty * item.cost}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n        <Col md={4}>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h3>Order Summary</h3>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>₹{order.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>₹{order.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>₹{order.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              \n              {(order.paymentType==='payLater' && order.paymentMethod==='null')?(\n                <>\n                  <ListGroup.Item>\n                    <Tab.Container id=\"list-group-tabs-example\">\n                        <Row>\n                            <Col sm={6}>\n                            <ListGroup>\n                                <ListGroup.Item action href=\"#link1\" onClick={(e)=>setPaymentMethod('UPI')}>\n                                UPI\n                                </ListGroup.Item>\n                                <ListGroup.Item action href=\"#link2\" onClick={(e)=>setPaymentMethod('PayTM')}>\n                                PayTM\n                                </ListGroup.Item>\n                            </ListGroup>\n                            </Col>\n                            <Col sm={6}>\n                            <Tab.Content>\n                                <Tab.Pane eventKey=\"#link1\">\n                                <h6>{eatery.upi}</h6>\n                                </Tab.Pane>\n                                <Tab.Pane eventKey=\"#link2\">\n                                <h6>{eatery.paytm}</h6>\n                                </Tab.Pane>\n                            </Tab.Content>\n                          </Col>\n                        </Row>\n                      </Tab.Container>\n                  </ListGroup.Item>\n                  \n                  <ListGroup.Item>\n                    <Button\n                      type='button'\n                      className='btn btn-block'\n                      onClick={()=>paymentHandler(order)}\n                      disabled={paymentMethod==='null' || order.cancelled}\n                    >\n                      Payment Done\n                    </Button>\n                  </ListGroup.Item>\n                  {loadingPay && <Loader />}\n                  {errorPay && <Message variant='danger'>{errorPay}</Message>}\n                </>\n\n                \n              ):(null)}\n              {order.completed && (\n                <ListGroup.Item>\n                  {errorEateryReview && (\n                    <Message variant='danger'>{errorEateryReview}</Message>\n                  )}\n                  {reviewDone ? null : (\n                    <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='rating'>\n                      <Form.Label>Rating</Form.Label>\n                      <Form.Control as='select' value={rating} \n                       onChange={(e) => setRating(e.target.value)}>\n                        <option value=''>Select....</option>\n                        <option value='1'>1 - Poor</option>\n                        <option value='2'>2 - Fair</option>\n                        <option value='3'>3 - Good</option>\n                        <option value='4'>4 - Very Good</option>\n                        <option value='5'>5 - Excellent</option>\n                      </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='comment'>\n                      <Form.Label>Comment</Form.Label>\n                      <Form.Control as='textarea' rows='3' value={comment} \n                       onChange={(e) => setComment(e.target.value)}></Form.Control>\n                    </Form.Group>\n                    <Button type='submit' variant='primary'>Submit</Button>\n                  </Form>\n                  )}\n                  \n                </ListGroup.Item>\n              )}\n              {/* {!order.isPaid && (\n                <ListGroup.Item>\n                  {loadingPay && <Loader />}\n                  {!sdkReady ? (\n                    <Loader />\n                  ) : (\n                    <PayPalButton\n                      amount={order.totalPrice}\n                      onSuccess={successPaymentHandler}\n                    />\n                  )}\n                </ListGroup.Item>\n              )} */}\n              {/* {loadingDeliver && <Loader />}\n              {userInfo &&\n                userInfo.isAdmin &&\n                order.isPaid &&\n                !order.isDelivered && (\n                  <ListGroup.Item>\n                    <Button\n                      type='button'\n                      className='btn btn-block'\n                      onClick={deliverHandler}\n                    >\n                      Mark As Delivered\n                    </Button>\n                  </ListGroup.Item>\n                )} */}\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nexport default OrderSummary\n","/home/amrit/Desktop/WebD/Sero/client/src/Screens/MyOrderList.js",["202","203"],"import React, {useEffect } from 'react';\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../Components/Loader';\nimport Message from '../Components/Message';\nimport {listMyOrders} from '../actions/orderActions'\n\nconst MyOrderList = ({ history, match }) => {\n    const dispatch = useDispatch()\n\n\n    const userLogin = useSelector((state) => state.userLogin)\n    const { userInfo } = userLogin\n\n    const  orderListMy = useSelector(state => state.orderListMy) \n    const { loading, error, orders  } = orderListMy\n\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        }\n        else{\n            dispatch(listMyOrders())\n        }\n    }, [])\n\n\n    return (\n        <>\n            <Row className='align-items-center'>\n                <Col>\n                    <h2>Past Orders</h2>\n                </Col>\n            </Row>\n\n            {loading ? (\n                <Loader /> )\n            : error ? (\n                <Message variant='danger'>{error}</Message>) \n            : (\n                <Table striped bordered hover responsive className='table-sm'>\n                    <thead>\n                        <tr>\n                        <th>STATUS</th>\n                        <th>NAME</th>\n                        <th>PHONE</th>\n                        <th>DATE</th>\n                        <th>TOTAL</th>\n                \n                        <th>MODE</th>\n                        <th>COMPLETE</th>\n                        <th>INFO</th>\n                        <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {orders.map((order) => (\n                            \n                                <tr key={order._id}>\n                                <td>{order.isPaid?<i class=\"fas fa-check-circle\"></i>:'Unpaid'}</td>\n                                <td>{order.customerMeta.name}</td>\n                                <td>{order.customerMeta.phone}</td>\n                                <td>{order.createdAt.substring(0,10)}</td>\n                                <td>₹{order.totalPrice}</td>\n                                \n                                <td>{order.paymentMethod}</td>\n                                {/* <td><Button className='btn-sm' variant='success' onClick={completeHandler(order)}>Complete</Button></td>  */}\n                                <td><LinkContainer to={`/orderSummary/${order._id}`}>\n                                <Button className='btn-sm' variant='light'><i class=\"fas fa-info-circle\"></i></Button>\n                                    </LinkContainer>\n                                </td> \n                                {/* <td><Button className='btn-sm' variant='danger' onClick={cancelHandler(order)}>Cancel</Button></td>  */}\n                            </tr>\n                         \n                        \n                        ))}\n                    </tbody>\n                </Table>\n            )}  \n        </>\n    )\n}\n\nexport default MyOrderList","/home/amrit/Desktop/WebD/Sero/client/src/Components/Loader.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Components/Message.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Components/FormContainer.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/constants/userConstants.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Components/Review.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/actions/userActions.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Components/Eatery.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/Components/Category.js",["204","205","206","207","208","209","210","211","212","213"],"import React, {useState, useEffect} from 'react';\nimport {useSelector} from 'react-redux'\nimport { Row, Col, Image, ListGroup, Card, Button } from 'react-bootstrap'\nimport Item from '../Components/Item';\nimport Collapse from '@material-ui/core/Collapse';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst Category = ({name, menu}) => {\n    const  eateryDetails = useSelector(state => state.eateryDetails) // call whatever you call in the store\n    const {eatery} = eateryDetails\n    const [openCategory, setOpenCategory] = React.useState(true);\n\n    const handleClick = () => {\n        setOpenCategory(!openCategory);\n    };\n\n    return(\n        <div>\n            <ListItem button onClick={handleClick}>\n                            \n                <ListItemText primary= {name} />\n                    {openCategory ? <i class=\"fas fa-chevron-up\"></i> : <i class=\"fas fa-chevron-down\"></i>}\n            </ListItem>\n            <Collapse in={openCategory} timeout=\"auto\" unmountOnExit>\n                <List component=\"div\" disablePadding>\n                    {menu.map(item => (\n                        <Row key={item._id}>\n                            <Item item={item} eateryDetailProp={eatery}/>\n                        </Row>\n                    ))}\n                                                \n                </List>\n            </Collapse>\n        </div>\n    )\n}\n\nexport default Category;","/home/amrit/Desktop/WebD/Sero/client/src/constants/orderConstants.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/constants/eateryConstants.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/actions/cartActions.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/constants/cartConstants.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/actions/eateryActions.js",["214"],"import  {\n    EATERY_LIST_REQUEST,\n    EATERY_LIST_SUCCESS,\n    EATERY_LIST_FAIL,\n    EATERY_DETAILS_REQUEST,\n    EATERY_DETAILS_SUCCESS,\n    EATERY_DETAILS_FAIL,\n    EATERY_DELETE_SUCCESS,\n    EATERY_DELETE_REQUEST,\n    EATERY_DELETE_FAIL,\n    EATERY_CREATE_REQUEST,\n    EATERY_CREATE_SUCCESS,\n    EATERY_CREATE_FAIL,\n    EATERY_UPDATE_REQUEST,\n    EATERY_UPDATE_SUCCESS,\n    EATERY_UPDATE_FAIL,\n    EATERY_REVIEWS_FAIL,\n    EATERY_REVIEWS_REQUEST,\n    EATERY_REVIEWS_SUCCESS,\n    EATERY_CREATE_REVIEW_FAIL,\n    EATERY_CREATE_REVIEW_REQUEST,\n    EATERY_CREATE_REVIEW_SUCCESS\n} from '../constants/eateryConstants'\nimport axios from 'axios'\nimport { logout } from './userActions'\n\nexport const listEateries = () => async(dispatch) => {\n    try {\n        dispatch({ type: EATERY_LIST_REQUEST})\n\n        const {data} = await axios.get('/api/eateries')\n\n        dispatch({\n            type: EATERY_LIST_SUCCESS,\n            payload: data\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: EATERY_LIST_FAIL, \n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\n        })\n    }\n}\n\nexport const listEateryDetails = (id) => async(dispatch) => {\n    try {\n        dispatch({ type: EATERY_DETAILS_REQUEST})\n\n        const {data} = await axios.get(`/api/eateries/${id}`)\n\n        dispatch({\n            type: EATERY_DETAILS_SUCCESS,\n            payload: data\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: EATERY_DETAILS_FAIL, \n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\n        })\n    }\n}\n\nexport const createEateryReview = (id, review) => async (dispatch, getState) => {\n  try {\n      dispatch({\n          type: EATERY_CREATE_REVIEW_REQUEST,\n      })\n\n      const {\n          userLogin: { userInfo },\n      } = getState()\n\n      const config = {\n          headers: {\n              //Authorization: `Bearer ${userInfo.token}`,\n          },\n      }\n\n      await axios.post(`/api/eateries/${id}/reviews`, review, config)\n      \n      dispatch({\n          type: EATERY_CREATE_REVIEW_SUCCESS,\n      })\n  } catch (error) {\n      const message =\n      error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      \n      dispatch({\n          type: EATERY_CREATE_REVIEW_FAIL,\n          payload: message,\n      })\n  }\n}\n\nexport const getEateryReviews = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: EATERY_REVIEWS_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await axios.get(`/api/eateries/${id}/reviews`, config)\n        \n        console.log(data)\n        dispatch({\n            type: EATERY_REVIEWS_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        const message =\n        error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        \n        dispatch({\n            type: EATERY_REVIEWS_FAIL,\n            payload: message,\n        })\n    }\n}\n\nexport const deleteEatery = (id) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: EATERY_DELETE_REQUEST,\n      })\n  \n      const {\n        userLogin: { userInfo },\n      } = getState()\n  \n      const config = {\n        headers: {\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      }\n  \n      await axios.delete(`/api/eateries/${id}`, config)\n  \n      dispatch({\n        type: EATERY_DELETE_SUCCESS,\n      })\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n      }\n      dispatch({\n        type: EATERY_DELETE_FAIL,\n        payload: message,\n      })\n    }\n  }\n  \n  export const createEatery = () => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: EATERY_CREATE_REQUEST,\n      })\n  \n      const {\n        userLogin: { userInfo },\n      } = getState()\n  \n      const config = {\n        headers: {\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      }\n  \n      const { data } = await axios.post(`/api/eateries`, {}, config)\n  \n      dispatch({\n        type: EATERY_CREATE_SUCCESS,\n        payload: data,\n      })\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n      }\n      dispatch({\n        type: EATERY_CREATE_FAIL,\n        payload: message,\n      })\n    }\n  }\n  \nexport const updateEatery = (eatery) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: EATERY_UPDATE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await axios.put(`/api/eateries/${eatery._id}`,eatery,config)\n\n        dispatch({\n            type: EATERY_UPDATE_SUCCESS,\n            payload: data,\n        })\n        dispatch({ type: EATERY_DETAILS_SUCCESS, payload: data })\n    } catch (error) {\n        const message =\n        error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        if (message === 'Not authorized, token failed') {\n            dispatch(logout())\n        }\n        dispatch({\n            type: EATERY_UPDATE_FAIL,\n            payload: message,\n        })\n    }\n}","/home/amrit/Desktop/WebD/Sero/client/src/Components/CheckoutSteps.js",[],"/home/amrit/Desktop/WebD/Sero/client/src/actions/orderActions.js",["215"],"import axios from 'axios'\nimport { \n  ORDER_CANCEL_FAIL,\n  ORDER_CANCEL_REQUEST,\n  ORDER_CANCEL_SUCCESS,\n  ORDER_COMPLETED_FAIL,\n  ORDER_COMPLETED_REQUEST,\n  ORDER_COMPLETED_SUCCESS,\n  ORDER_CREATE_FAIL, \n  ORDER_CREATE_REQUEST, \n  ORDER_CREATE_SUCCESS, \n  ORDER_DETAILS_FAIL, \n  ORDER_DETAILS_REQUEST, \n  ORDER_DETAILS_SUCCESS, \n  ORDER_LIST_MY_FAIL, \n  ORDER_LIST_MY_REQUEST, \n  ORDER_LIST_MY_SUCCESS,\n  ORDER_LIST_REQUEST,\n  ORDER_PAYMENT_DONE_FAIL,\n  ORDER_PAYMENT_DONE_REQUEST,\n  ORDER_PAYMENT_DONE_SUCCESS,\n  ORDER_PAY_FAIL,\n  ORDER_PAY_REQUEST,\n  ORDER_PAY_SUCCESS\n} from '../constants/orderConstants'\nimport { logout } from './userActions'\nexport const createOrder = (order) => async (dispatch) => {\n    try {\n      dispatch({\n        type: ORDER_CREATE_REQUEST,\n      })\n  \n      const { data } = await axios.post(`/api/orders`, order)\n  \n      dispatch({\n        type: ORDER_CREATE_SUCCESS,\n        payload: data,\n      })\n    } catch (error) {\n        \n      dispatch({\n        type: ORDER_CREATE_FAIL,\n        payload:\n            error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n      })\n    }\n  }\n\n  export const getOrderDetails = (id) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: ORDER_DETAILS_REQUEST,\n      })\n  \n      const { data } = await axios.get(`/api/orders/${id}`)\n  \n      dispatch({\n        type: ORDER_DETAILS_SUCCESS,\n        payload: data,\n      })\n    } catch (error) {\n     \n      \n      dispatch({\n        type: ORDER_DETAILS_FAIL,\n        payload:\n        error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message,\n      })\n    }\n  }\n  \n  export const listMyOrders = () => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: ORDER_LIST_MY_REQUEST,\n      })\n  \n      const {\n        userLogin: { userInfo },\n      } = getState()\n      \n      const config = {\n        headers: {\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      }\n  \n      const { data } = await axios.get(`/api/orders/myorders`, config)\n  \n      dispatch({\n        type: ORDER_LIST_MY_SUCCESS,\n        payload: data,\n      })\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n      }\n      dispatch({\n        type: ORDER_LIST_MY_FAIL,\n        payload: message,\n      })\n    }\n  }\n\n  export const payOrder = (order) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: ORDER_PAY_REQUEST,\n      })\n  \n      const {\n        userLogin: { userInfo },\n      } = getState()\n  \n      const config = {\n        headers: {\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      }\n  \n      const { data } = await axios.put(\n        `/api/orders/${order._id}/pay`,\n        {},\n        config\n      )\n  \n      dispatch({\n        type: ORDER_PAY_SUCCESS,\n        payload: data,\n      })\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n      }\n      dispatch({\n        type: ORDER_PAY_FAIL,\n        payload: message,\n      })\n    }\n  }\n\nexport const completeOrder = (order) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_COMPLETED_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(\n      `/api/orders/${order._id}/complete`,\n      {},\n      config\n    )\n\n    dispatch({\n      type: ORDER_COMPLETED_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: ORDER_COMPLETED_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const cancelOrder = (order) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CANCEL_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(\n      `/api/orders/${order._id}/cancel`,\n      {},\n      config\n    )\n\n    dispatch({\n      type: ORDER_CANCEL_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: ORDER_CANCEL_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const paymentDone = (order) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_PAYMENT_DONE_REQUEST,\n    })\n\n    const { data } = await axios.put(`/api/orders/${order._id}/customerPayment`, order)\n\n    dispatch({\n      type: ORDER_PAYMENT_DONE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    \n    dispatch({\n      type: ORDER_PAYMENT_DONE_FAIL,\n      payload: message,\n    })\n  }\n}\n\n// export const listOrders = () => async(dispatch) => {\n//   try {\n//       dispatch({ type: ORDER_LIST_REQUEST})\n\n//       const {data} = await axios.get('/api/orders')\n\n//       dispatch({\n//           type: EATERY_LIST_SUCCESS,\n//           payload: data\n//       })\n\n//   }\n//   catch(error){\n//       dispatch({\n//           type: EATERY_LIST_FAIL, \n//           payload: error.response && error.response.data.message ? error.response.data.message : error.message\n//       })\n//   }\n// }","/home/amrit/Desktop/WebD/Sero/client/src/Components/Item.js",["216","217","218","219","220","221","222"],"import { disable } from 'colors';\nimport '../index.css';\nimport React, {useState, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux' \nimport { Card, Col, Row, ListGroup, Button, Image} from 'react-bootstrap'\nimport {addToCart} from '../actions/cartActions'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 10,\n      width: '100%'\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: 'auto',\n      width: '90%',\n      height: 'auto',\n      backgroundColor: 'black',\n      color: 'white'\n      \n    },\n    image: {\n      width: 128,\n      height: 100,\n    },\n    img: {\n      margin: 'auto',\n      display: 'block',\n      maxWidth: '100%',\n      maxHeight: '100%',\n    },\n  }));\n\nconst Item = ({item,eateryDetailProp}) => {\n    \n    const cart = useSelector(state=>state.cart)\n    const {cartItems,eateryDetails}=cart\n    const dispatch = useDispatch()\n    const classes = useStyles();\n    const handleClick = (quantity) =>{\n        \n        dispatch(addToCart(item,eateryDetailProp,quantity))\n    }\n    var existingQty=0\n    if(eateryDetails._id==eateryDetailProp._id){\n        const existItem  = cartItems.find(x=>x.product === item._id)\n        if(existItem){\n            existingQty=existItem.qty\n        }\n        \n\n    }\n    const [qty,setQty]=useState(existingQty)\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <Grid container spacing={2}>\n                <Grid item>\n                    \n                </Grid>\n                <Grid item xs={12} sm container>\n                    <Grid item xs container direction=\"column\" spacing={2}>\n                    <Grid item xs>\n                        <Typography gutterBottom>\n                        {item.name} <div class=\"badge badge-danger ml-2\">{item.isAvailable? null: 'Unavailable'}</div> \n                        </Typography>\n                        <Typography variant=\"body2\" gutterBottom>\n                        {item.description}\n                        </Typography>\n                        \n                    </Grid>\n                    \n                    </Grid>\n                    <Grid item>\n                    <Typography align='right' >₹{item.cost}</Typography>\n                    <Typography >\n                        <Row><Button className='mx-3' size='sm' onClick={()=> {\n                        setQty(qty-1)\n                        handleClick(qty-1)\n                        }} disabled={!eateryDetailProp.isOpen || qty<=0 || !item.isAvailable }>\n                            <i class=\"fas fa-chevron-left\"></i>\n                        </Button>\n                        \n                        <Typography>{qty}</Typography>\n                    \n                        <Button className='mx-3' size='sm' onClick={()=> {\n                            setQty(qty+1)\n                            handleClick(qty+1)\n                            }} disabled={!eateryDetailProp.isOpen || !item.isAvailable}>\n                                <i class=\"fas fa-chevron-right\"></i>\n                        </Button></Row>\n                        \n                    </Typography>\n                    </Grid>\n                </Grid>\n                </Grid>\n            </Paper>\n        </div>\n        \n        \n    );\n}\n\nexport default Item;","/home/amrit/Desktop/WebD/Sero/client/src/Components/PopUp.js",[],{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":16},{"ruleId":"227","severity":1,"message":"231","line":1,"column":17,"nodeType":"229","messageId":"230","endLine":1,"endColumn":26},{"ruleId":"227","severity":1,"message":"232","line":10,"column":17,"nodeType":"229","messageId":"230","endLine":10,"endColumn":26},{"ruleId":"227","severity":1,"message":"233","line":1,"column":223,"nodeType":"229","messageId":"230","endLine":1,"endColumn":244},{"ruleId":"234","severity":1,"message":"235","line":47,"column":8,"nodeType":"236","endLine":47,"endColumn":65,"suggestions":"237"},{"ruleId":"227","severity":1,"message":"238","line":53,"column":95,"nodeType":"229","messageId":"230","endLine":53,"endColumn":108},{"ruleId":"227","severity":1,"message":"239","line":56,"column":91,"nodeType":"229","messageId":"230","endLine":56,"endColumn":102},{"ruleId":"234","severity":1,"message":"240","line":105,"column":8,"nodeType":"236","endLine":105,"endColumn":106,"suggestions":"241"},{"ruleId":"227","severity":1,"message":"242","line":1,"column":27,"nodeType":"229","messageId":"230","endLine":1,"endColumn":35},{"ruleId":"227","severity":1,"message":"243","line":4,"column":38,"nodeType":"229","messageId":"230","endLine":4,"endColumn":42},{"ruleId":"227","severity":1,"message":"244","line":4,"column":44,"nodeType":"229","messageId":"230","endLine":4,"endColumn":50},{"ruleId":"227","severity":1,"message":"245","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":13},{"ruleId":"227","severity":1,"message":"246","line":5,"column":31,"nodeType":"229","messageId":"230","endLine":5,"endColumn":36},{"ruleId":"227","severity":1,"message":"247","line":18,"column":10,"nodeType":"229","messageId":"230","endLine":18,"endColumn":20},{"ruleId":"227","severity":1,"message":"248","line":41,"column":18,"nodeType":"229","messageId":"230","endLine":41,"endColumn":31},{"ruleId":"227","severity":1,"message":"249","line":41,"column":40,"nodeType":"229","messageId":"230","endLine":41,"endColumn":51},{"ruleId":"227","severity":1,"message":"250","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":14},{"ruleId":"234","severity":1,"message":"251","line":28,"column":8,"nodeType":"236","endLine":28,"endColumn":10,"suggestions":"252"},{"ruleId":"227","severity":1,"message":"242","line":1,"column":16,"nodeType":"229","messageId":"230","endLine":1,"endColumn":24},{"ruleId":"227","severity":1,"message":"231","line":1,"column":26,"nodeType":"229","messageId":"230","endLine":1,"endColumn":35},{"ruleId":"227","severity":1,"message":"253","line":3,"column":15,"nodeType":"229","messageId":"230","endLine":3,"endColumn":18},{"ruleId":"227","severity":1,"message":"246","line":3,"column":20,"nodeType":"229","messageId":"230","endLine":3,"endColumn":25},{"ruleId":"227","severity":1,"message":"254","line":3,"column":27,"nodeType":"229","messageId":"230","endLine":3,"endColumn":36},{"ruleId":"227","severity":1,"message":"255","line":3,"column":38,"nodeType":"229","messageId":"230","endLine":3,"endColumn":42},{"ruleId":"227","severity":1,"message":"244","line":3,"column":44,"nodeType":"229","messageId":"230","endLine":3,"endColumn":50},{"ruleId":"227","severity":1,"message":"256","line":6,"column":10,"nodeType":"229","messageId":"230","endLine":6,"endColumn":20},{"ruleId":"227","severity":1,"message":"257","line":7,"column":8,"nodeType":"229","messageId":"230","endLine":7,"endColumn":21},{"ruleId":"227","severity":1,"message":"258","line":10,"column":8,"nodeType":"229","messageId":"230","endLine":10,"endColumn":20},{"ruleId":"227","severity":1,"message":"259","line":74,"column":24,"nodeType":"229","messageId":"230","endLine":74,"endColumn":32},{"ruleId":"227","severity":1,"message":"260","line":18,"column":3,"nodeType":"229","messageId":"230","endLine":18,"endColumn":21},{"ruleId":"227","severity":1,"message":"261","line":1,"column":10,"nodeType":"229","messageId":"230","endLine":1,"endColumn":17},{"ruleId":"227","severity":1,"message":"231","line":3,"column":26,"nodeType":"229","messageId":"230","endLine":3,"endColumn":35},{"ruleId":"227","severity":1,"message":"255","line":5,"column":10,"nodeType":"229","messageId":"230","endLine":5,"endColumn":14},{"ruleId":"227","severity":1,"message":"253","line":5,"column":16,"nodeType":"229","messageId":"230","endLine":5,"endColumn":19},{"ruleId":"227","severity":1,"message":"254","line":5,"column":26,"nodeType":"229","messageId":"230","endLine":5,"endColumn":35},{"ruleId":"227","severity":1,"message":"246","line":5,"column":45,"nodeType":"229","messageId":"230","endLine":5,"endColumn":50},{"ruleId":"262","severity":1,"message":"263","line":50,"column":25,"nodeType":"264","messageId":"265","endLine":50,"endColumn":27},"no-native-reassign",["266"],"no-negated-in-lhs",["267"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Container' is defined but never used.","'ORDER_COMPLETED_RESET' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.","ArrayExpression",["268"],"'errorComplete' is assigned a value but never used.","'errorCancel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orderCancelled._id', 'orderCompleted._id', and 'orderPaid._id'. Either include them or remove the dependency array.",["269"],"'useState' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'axios' is defined but never used.","'Image' is defined but never used.","'CART_RESET' is defined but never used.","'eateryLoading' is assigned a value but never used.","'eateryError' is assigned a value but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'userInfo'. Either include them or remove the dependency array.",["270"],"'Col' is defined but never used.","'ListGroup' is defined but never used.","'Card' is defined but never used.","'makeStyles' is defined but never used.","'ListSubheader' is defined but never used.","'ListItemIcon' is defined but never used.","'userInfo' is assigned a value but never used.","'ORDER_LIST_REQUEST' is defined but never used.","'disable' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [history, customerMeta, success, eateryDetails, ENDPOINT, order._id, dispatch]",{"range":"277","text":"278"},"Update the dependencies array to be: [dispatch, history, userInfo, user, success, ENDPOINT, successPay, successComplete, successCancel, orderPaid._id, orderCancelled._id, orderCompleted._id]",{"range":"279","text":"280"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"281","text":"282"},[1566,1623],"[history, customerMeta, success, eateryDetails, ENDPOINT, order._id, dispatch]",[4022,4120],"[dispatch, history, userInfo, user, success, ENDPOINT, successPay, successComplete, successCancel, orderPaid._id, orderCancelled._id, orderCompleted._id]",[854,856],"[dispatch, history, userInfo]"]