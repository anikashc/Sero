[{"F:\\E-commerce\\client\\src\\index.js":"1","F:\\E-commerce\\client\\src\\store.js":"2","F:\\E-commerce\\client\\src\\App.js":"3","F:\\E-commerce\\client\\src\\reducers\\userReducers.js":"4","F:\\E-commerce\\client\\src\\reducers\\eateryReducers.js":"5","F:\\E-commerce\\client\\src\\Components\\Header.js":"6","F:\\E-commerce\\client\\src\\Components\\Footer.js":"7","F:\\E-commerce\\client\\src\\Screens\\Register.js":"8","F:\\E-commerce\\client\\src\\reducers\\orderReducer.js":"9","F:\\E-commerce\\client\\src\\Screens\\Login.js":"10","F:\\E-commerce\\client\\src\\Screens\\Menu.js":"11","F:\\E-commerce\\client\\src\\reducers\\cartReducers.js":"12","F:\\E-commerce\\client\\src\\Screens\\EateryList.js":"13","F:\\E-commerce\\client\\src\\Screens\\Cart.js":"14","F:\\E-commerce\\client\\src\\Screens\\Payment.js":"15","F:\\E-commerce\\client\\src\\Screens\\Home.js":"16","F:\\E-commerce\\client\\src\\Screens\\UserEdit.js":"17","F:\\E-commerce\\client\\src\\Screens\\Feedback.js":"18","F:\\E-commerce\\client\\src\\Screens\\MyOrderList.js":"19","F:\\E-commerce\\client\\src\\Screens\\Checkout.js":"20","F:\\E-commerce\\client\\src\\Screens\\OrderSummary.js":"21","F:\\E-commerce\\client\\src\\Screens\\UserList.js":"22","F:\\E-commerce\\client\\src\\Screens\\DashboardMenu.js":"23","F:\\E-commerce\\client\\src\\Screens\\Dashboard.js":"24","F:\\E-commerce\\client\\src\\Screens\\EateryEdit.js":"25","F:\\E-commerce\\client\\src\\Components\\Message.js":"26","F:\\E-commerce\\client\\src\\Components\\Category.js":"27","F:\\E-commerce\\client\\src\\Components\\FormContainer.js":"28","F:\\E-commerce\\client\\src\\Components\\Review.js":"29","F:\\E-commerce\\client\\src\\constants\\userConstants.js":"30","F:\\E-commerce\\client\\src\\constants\\eateryConstants.js":"31","F:\\E-commerce\\client\\src\\Components\\Loader.js":"32","F:\\E-commerce\\client\\src\\actions\\userActions.js":"33","F:\\E-commerce\\client\\src\\actions\\eateryActions.js":"34","F:\\E-commerce\\client\\src\\constants\\orderConstants.js":"35","F:\\E-commerce\\client\\src\\Components\\CheckoutSteps.js":"36","F:\\E-commerce\\client\\src\\constants\\cartConstants.js":"37","F:\\E-commerce\\client\\src\\actions\\orderActions.js":"38","F:\\E-commerce\\client\\src\\actions\\cartActions.js":"39","F:\\E-commerce\\client\\src\\Components\\Eatery.js":"40","F:\\E-commerce\\client\\src\\Components\\Item.js":"41"},{"size":327,"mtime":1614445136741,"results":"42","hashOfConfig":"43"},{"size":2781,"mtime":1615283860971,"results":"44","hashOfConfig":"43"},{"size":2308,"mtime":1614607815581,"results":"45","hashOfConfig":"43"},{"size":3785,"mtime":1613560290438,"results":"46","hashOfConfig":"43"},{"size":3644,"mtime":1614445136781,"results":"47","hashOfConfig":"43"},{"size":3727,"mtime":1613769214970,"results":"48","hashOfConfig":"43"},{"size":2587,"mtime":1615282560098,"results":"49","hashOfConfig":"43"},{"size":4304,"mtime":1612775988073,"results":"50","hashOfConfig":"43"},{"size":4699,"mtime":1615283812051,"results":"51","hashOfConfig":"43"},{"size":2422,"mtime":1614445136565,"results":"52","hashOfConfig":"43"},{"size":4761,"mtime":1615283047165,"results":"53","hashOfConfig":"43"},{"size":2796,"mtime":1615281305033,"results":"54","hashOfConfig":"43"},{"size":4815,"mtime":1614445136533,"results":"55","hashOfConfig":"43"},{"size":5662,"mtime":1615282816492,"results":"56","hashOfConfig":"43"},{"size":7822,"mtime":1615288203998,"results":"57","hashOfConfig":"43"},{"size":5095,"mtime":1614760545066,"results":"58","hashOfConfig":"43"},{"size":5723,"mtime":1613566259304,"results":"59","hashOfConfig":"43"},{"size":1985,"mtime":1613976170705,"results":"60","hashOfConfig":"43"},{"size":3192,"mtime":1614978630119,"results":"61","hashOfConfig":"43"},{"size":4333,"mtime":1615278655649,"results":"62","hashOfConfig":"43"},{"size":13357,"mtime":1615288749452,"results":"63","hashOfConfig":"43"},{"size":3370,"mtime":1614445136701,"results":"64","hashOfConfig":"43"},{"size":11164,"mtime":1615188329175,"results":"65","hashOfConfig":"43"},{"size":14940,"mtime":1615188329175,"results":"66","hashOfConfig":"43"},{"size":12269,"mtime":1615188329201,"results":"67","hashOfConfig":"43"},{"size":304,"mtime":1613380062534,"results":"68","hashOfConfig":"43"},{"size":1486,"mtime":1615282895183,"results":"69","hashOfConfig":"43"},{"size":346,"mtime":1612766841348,"results":"70","hashOfConfig":"43"},{"size":1970,"mtime":1615123220032,"results":"71","hashOfConfig":"43"},{"size":1515,"mtime":1613551580999,"results":"72","hashOfConfig":"43"},{"size":1508,"mtime":1614445136741,"results":"73","hashOfConfig":"43"},{"size":479,"mtime":1612002324299,"results":"74","hashOfConfig":"43"},{"size":7893,"mtime":1614445136741,"results":"75","hashOfConfig":"43"},{"size":6244,"mtime":1614445136701,"results":"76","hashOfConfig":"43"},{"size":2006,"mtime":1615283425074,"results":"77","hashOfConfig":"43"},{"size":1294,"mtime":1614352929299,"results":"78","hashOfConfig":"43"},{"size":264,"mtime":1615280404670,"results":"79","hashOfConfig":"43"},{"size":7001,"mtime":1615286331405,"results":"80","hashOfConfig":"43"},{"size":1414,"mtime":1614965092572,"results":"81","hashOfConfig":"43"},{"size":1323,"mtime":1615188329172,"results":"82","hashOfConfig":"43"},{"size":3609,"mtime":1615281247220,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1y75gs6",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"86"},"F:\\E-commerce\\client\\src\\index.js",[],["175","176"],"F:\\E-commerce\\client\\src\\store.js",[],"F:\\E-commerce\\client\\src\\App.js",["177"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootstrap.min.css';\r\nimport './index.css';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Container } from 'react-bootstrap';\r\nimport Header from './Components/Header';\r\nimport Footer from './Components/Footer';\r\nimport Home from './Screens/Home';\r\nimport Menu from './Screens/Menu';\r\nimport Cart from './Screens/Cart';\r\nimport Login from './Screens/Login';\r\nimport Register from './Screens/Register'\r\nimport Checkout from './Screens/Checkout';\r\nimport Payment from './Screens/Payment';\r\nimport Dashboard from './Screens/Dashboard';\r\nimport Feedback from './Screens/Feedback';\r\nimport DashboardMenu from './Screens/DashboardMenu';\r\nimport UserList from './Screens/UserList';\r\nimport UserEdit from './Screens/UserEdit';\r\nimport EateryList from './Screens/EateryList';\r\nimport EateryEdit from './Screens/EateryEdit';\r\nimport OrderSummary from './Screens/OrderSummary';\r\nimport MyOrderList from './Screens/MyOrderList';\r\nfunction App() {\r\n\r\n    return (\r\n      <Router>\r\n\r\n        <Header />\r\n\r\n        <main>\r\n\r\n          <Route path='/' component={Home} exact />\r\n\r\n          <Container>\r\n            <Route path = '/login' component={Login} />\r\n            <Route path = '/register' component={Register} />\r\n            <Route path = '/dashboard' component={Dashboard} />\r\n            <Route path = '/dashboardMenu' component={DashboardMenu} />\r\n            <Route path = '/menu/:id' component={Menu} exact />\r\n            <Route path = '/cart' component={Cart} />\r\n            <Route path = '/checkout' component={Checkout} />\r\n            <Route path = '/payment' component={Payment} />\r\n            <Route path = '/orderSummary/:id' component={OrderSummary} />\r\n            <Route path = '/myorders' component={MyOrderList} />\r\n            <Route path = '/feedback' component={Feedback} />\r\n            <Route path = '/admin/userlist' component={UserList} />\r\n            <Route path = '/admin/user/:id/edit' component={UserEdit} />\r\n            <Route path = '/admin/eatery/:id/edit' component={EateryEdit} />\r\n            <Route path = '/admin/eaterylist' component={EateryList} />\r\n          </Container>\r\n        </main>\r\n\r\n        <Footer />\r\n\r\n      </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","F:\\E-commerce\\client\\src\\reducers\\userReducers.js",[],"F:\\E-commerce\\client\\src\\reducers\\eateryReducers.js",[],"F:\\E-commerce\\client\\src\\Components\\Header.js",[],"F:\\E-commerce\\client\\src\\Components\\Footer.js",[],"F:\\E-commerce\\client\\src\\Screens\\Register.js",[],"F:\\E-commerce\\client\\src\\reducers\\orderReducer.js",["178"],"import { ORDER_CANCEL_FAIL, ORDER_CANCEL_REQUEST, ORDER_CANCEL_RESET, ORDER_CANCEL_SUCCESS, ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_RESET, ORDER_CREATE_SUCCESS, ORDER_COMPLETED_FAIL, ORDER_COMPLETED_REQUEST, ORDER_COMPLETED_RESET, ORDER_COMPLETED_SUCCESS, ORDER_DETAILS_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_LIST_MY_FAIL, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_RESET, ORDER_LIST_MY_SUCCESS, ORDER_PAY_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_RESET, ORDER_PAY_SUCCESS, ORDER_PAYMENT_DONE_SUCCESS, ORDER_PAYMENT_DONE_REQUEST, ORDER_PAYMENT_DONE_FAIL, ORDER_PAYMENT_DONE_RESET, ORDER_EDIT_REQUEST, ORDER_EDIT_SUCCESS, ORDER_EDIT_FAIL, ORDER_EDIT_RESET } from \"../constants/orderConstants\"\r\n\r\n  \r\n  export const orderCreateReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case ORDER_CREATE_REQUEST:\r\n        return { loading: true }\r\n      case ORDER_CREATE_SUCCESS:\r\n        return { loading: false, success: true, order: action.payload }\r\n      case ORDER_CREATE_FAIL:\r\n        return { loading: false, error: action.payload }\r\n      case ORDER_CREATE_RESET:\r\n        return {}\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport const orderEditReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_EDIT_REQUEST:\r\n      return { loading: true }\r\n    case ORDER_EDIT_SUCCESS:\r\n      return { loading: false, success: true, order: action.payload }\r\n    case ORDER_EDIT_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case ORDER_EDIT_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderDetailsReducer = (\r\n  state = { loading: true, orderItems: [], customerMeta: {} },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ORDER_DETAILS_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case ORDER_DETAILS_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        order: action.payload,\r\n      }\r\n    case ORDER_DETAILS_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderListMyReducer = (state = { orders: [] }, action) => {\r\n  switch (action.type) {\r\n    case ORDER_LIST_MY_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_LIST_MY_SUCCESS:\r\n      return {\r\n        \r\n        loading: false,\r\n        orders: action.payload,\r\n      }\r\n    case ORDER_LIST_MY_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_LIST_MY_RESET:\r\n      return { orders: [] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderPayReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_PAY_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_PAY_SUCCESS:\r\n      return {\r\n        order: action.payload,\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_PAY_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_PAY_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderCompleteReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_COMPLETED_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_COMPLETED_SUCCESS:\r\n      return {\r\n        order: action.payload,\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_COMPLETED_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    // case ORDER_COMPLETED_RESET:\r\n    //   return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderCancelReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_CANCEL_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_CANCEL_SUCCESS:\r\n      return {\r\n        order: action.payload,\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_CANCEL_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_CANCEL_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderCustomerPaidReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_PAYMENT_DONE_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_PAYMENT_DONE_SUCCESS:\r\n      return {\r\n        order: action.payload,\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_PAYMENT_DONE_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_PAYMENT_DONE_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}","F:\\E-commerce\\client\\src\\Screens\\Login.js",[],"F:\\E-commerce\\client\\src\\Screens\\Menu.js",["179","180","181"],"F:\\E-commerce\\client\\src\\reducers\\cartReducers.js",[],"F:\\E-commerce\\client\\src\\Screens\\EateryList.js",[],"F:\\E-commerce\\client\\src\\Screens\\Cart.js",["182"],"F:\\E-commerce\\client\\src\\Screens\\Payment.js",["183"],"import React, { useState, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col,Button, ListGroup, Tab, Row} from 'react-bootstrap'\r\n// import {saveCustomerMeta} from '../actions/cartActions'\r\nimport FormContainer from '../Components/FormContainer'\r\nimport CheckoutSteps from '../Components/CheckoutSteps'\r\nimport Message from '../Components/Message'\r\nimport {createOrder, editOrder} from '../actions/orderActions'\r\nimport { Link } from 'react-router-dom'\r\nimport {ORDER_CREATE_RESET, ORDER_EDIT_RESET} from '../constants/orderConstants'\r\n\r\nlet socket\r\n\r\nconst Payment = ({history,location}) => {\r\n    const [paymentMethod, setPaymentMethod] = useState('null')\r\n  \r\n\r\n    const redirect = location.search? location.search.split('=')[1]:null\r\n\r\n\r\n    const cart = useSelector(state=>state.cart)\r\n    const {cartItems, eateryDetails, customerMeta}=cart\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const ENDPOINT ='localhost:5000'\r\n\r\n    const orderCreate = useSelector((state) => state.orderCreate)\r\n    const { order, success, error } = orderCreate\r\n\r\n    // if the order is edited\r\n    const orderEdit = useSelector((state) => state.orderEdit)\r\n    const { order: orderEditDetails, success: successEdit, error: errorEdit } = orderEdit\r\n    \r\n    useEffect(() => {\r\n        socket =io.connect(ENDPOINT, {reconnect: true})\r\n        if(!customerMeta){\r\n            history.push('/checkout');\r\n        }\r\n        else{\r\n            if (success) {\r\n                \r\n                socket.emit('orderPlaced')\r\n                //console.log(\"Order is created but wait for confirmation\")\r\n                history.push(`/orderSummary/${order._id}`)\r\n                dispatch({ type: ORDER_CREATE_RESET })\r\n            }\r\n            if (successEdit) {\r\n                socket.emit('orderPlaced')\r\n                //console.log(\"Order is created but wait for confirmation\")\r\n                history.push(`/orderSummary/${orderEditDetails._id}?`)\r\n                dispatch({ type: ORDER_EDIT_RESET })\r\n            }\r\n        }\r\n        return () => {\r\n            //socket.emit('disconnect')\r\n            socket.off()\r\n        }\r\n\r\n    }, [history, customerMeta, success, eateryDetails, ENDPOINT, successEdit])\r\n\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n        return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    cart.itemsPrice = addDecimals(\r\n        cartItems.reduce((acc, item) => acc + item.cost * item.qty, 0)\r\n    )\r\n\r\n    cart.taxPrice = addDecimals(Number((0.05 * cart.itemsPrice).toFixed(2)))\r\n    cart.totalPrice = (\r\n        Number(cart.itemsPrice) +\r\n        Number(cart.taxPrice)\r\n    ).toFixed(2)\r\n\r\n\r\n    \r\n    const placeOrderHandler = () => {\r\n\r\n        \r\n            if(redirect){\r\n                dispatch(\r\n                    editOrder({\r\n                        eateryId: eateryDetails._id,\r\n                        orderId: redirect,\r\n                        orderItems: cart.cartItems,\r\n                        itemsPrice: cart.itemsPrice,\r\n                        taxPrice: cart.taxPrice,\r\n                        totalPrice: cart.totalPrice,\r\n                    })\r\n                )\r\n            }\r\n            else{\r\n\r\n                dispatch(\r\n                  createOrder({\r\n                    eateryId: eateryDetails._id,\r\n                    customerMeta: {\r\n                        name: customerMeta.name,\r\n                        phone: customerMeta.phone,\r\n                        email: customerMeta.email\r\n                    },\r\n                    orderItems: cart.cartItems,\r\n                    paymentMethod: paymentMethod,\r\n                    itemsPrice: cart.itemsPrice,\r\n                    paymentType: cart.customerMeta.paymentType,\r\n                    taxPrice: cart.taxPrice,\r\n                    totalPrice: cart.totalPrice,\r\n                  })\r\n                )\r\n            }\r\n        \r\n    }\r\n\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <CheckoutSteps step1 step2/>\r\n            <FormContainer>\r\n                <h2>Payment</h2>\r\n            \r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        \r\n                        <p>\r\n                            <strong>Customer Details: </strong> <br />\r\n                            {customerMeta.name}<br />\r\n                            {customerMeta.phone}\r\n                        </p>   \r\n                    </ListGroup.Item>\r\n                    <h4 className=\"py-3\">Order from <Link to={`/menu/${eateryDetails._id}`}>\r\n                            {eateryDetails.name}</Link>\r\n                    </h4>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                        <Col>Items</Col>\r\n                        <Col>₹{cart.itemsPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                        <Col>GST</Col>\r\n                        <Col>₹{cart.taxPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                        <Col>Total</Col>\r\n                        <Col>₹{cart.totalPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    {customerMeta.paymentType==='payNow'?(\r\n                        <ListGroup.Item>\r\n                            <Tab.Container id=\"list-group-tabs-example\">\r\n                                <Row>\r\n                                    <Col sm={6}>\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item action href=\"#link1\" onClick={(e)=>setPaymentMethod('UPI')}>\r\n                                        UPI\r\n                                        </ListGroup.Item>\r\n                                        <ListGroup.Item action href=\"#link2\" onClick={(e)=>setPaymentMethod('PayTM')}>\r\n                                        PayTM\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                    </Col>\r\n                                    <Col sm={6}>\r\n                                    <Tab.Content>\r\n                                        <Tab.Pane eventKey=\"#link1\">\r\n                                        <h6>{eateryDetails.upi}</h6>\r\n                                        </Tab.Pane>\r\n                                        <Tab.Pane eventKey=\"#link2\">\r\n                                        <h6>{eateryDetails.paytm}</h6>\r\n                                        </Tab.Pane>\r\n                                    </Tab.Content>\r\n                                    </Col>\r\n                                    \r\n                                </Row>\r\n                            </Tab.Container>\r\n                        </ListGroup.Item>\r\n                    ):(\r\n                        null\r\n                    )}\r\n                    \r\n\r\n                </ListGroup>\r\n                <ListGroup.Item>\r\n                {(error || errorEdit) && <Message variant='danger'>{error || errorEdit}</Message>}\r\n                </ListGroup.Item>\r\n                <Button\r\n                    type='button'\r\n                    className='btn-block'\r\n                    disabled={cartItems.length === 0 || !eateryDetails || (paymentMethod==='null' && cart.customerMeta.paymentType==='payNow')}\r\n                    onClick={placeOrderHandler}\r\n                >\r\n                    Place Order\r\n                </Button>         \r\n            </FormContainer>\r\n\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Payment\r\n\r\n\r\n","F:\\E-commerce\\client\\src\\Screens\\Home.js",[],"F:\\E-commerce\\client\\src\\Screens\\UserEdit.js",[],"F:\\E-commerce\\client\\src\\Screens\\Feedback.js",["184"],"import React, { useEffect} from 'react';\r\nimport randomColor from 'randomcolor';\r\n// import { Row, Col, Container, InputGroup, FormControl } from 'react-bootstrap';\r\nimport Review from '../Components/Review';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../Components/Loader';\r\nimport Message from '../Components/Message';\r\nimport { getEateryReviews } from '../actions/eateryActions'\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport {Button, Container} from 'react-bootstrap'\r\n\r\n\r\nconst Feedback = ({history}) =>{\r\n    const dispatch = useDispatch();\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n    const reviewList = useSelector(state => state.eateryReviews);\r\n    const {error, loading, reviews} = reviewList;\r\n    \r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n        else{\r\n            if(userInfo.eatery){\r\n                dispatch(getEateryReviews(userInfo.eatery));\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo]);\r\n    \r\n    return(\r\n        <div>\r\n                <LinkContainer to='/dashboard' className='my-3'>\r\n                    <Button variant='secondary'>Back</Button>\r\n                </LinkContainer>\r\n                <h2>Feedback and Complaints</h2>\r\n            { loading? ( <Loader /> ) : error?  (<Message variant='danger'>{ error }</Message>) :\r\n            (\r\n                reviews.map((review) => {\r\n                    return(\r\n                        <Review \r\n                            name={review.name}\r\n                            email={review.email}\r\n                            comment={review.comment}\r\n                            rating={review.rating}\r\n                            color={randomColor()}\r\n                        />\r\n                    )\r\n                })\r\n            )\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feedback","F:\\E-commerce\\client\\src\\Screens\\MyOrderList.js",["185","186"],"import React, {useEffect } from 'react';\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../Components/Loader';\r\nimport Message from '../Components/Message';\r\nimport {listMyOrders} from '../actions/orderActions'\r\n\r\nconst MyOrderList = ({ history, match }) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const  orderListMy = useSelector(state => state.orderListMy) \r\n    const { loading, error, orders  } = orderListMy\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n        else{\r\n            dispatch(listMyOrders())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h2>Past Orders</h2>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loading ? (\r\n                <Loader /> )\r\n            : error ? (\r\n                <Message variant='danger'>{error}</Message>) \r\n            : (\r\n                <Table striped bordered hover responsive className='table-sm'>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>STATUS</th>\r\n                        <th>NAME</th>\r\n                        <th>PHONE</th>\r\n                        <th>DATE</th>\r\n                        <th>TOTAL</th>\r\n                \r\n                        <th>MODE</th>\r\n                        <th>COMPLETE</th>\r\n                        <th>INFO</th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {orders.map((order) => (\r\n                            \r\n                                <tr key={order._id}>\r\n                                <td>{order.isPaid?<i class=\"fas fa-check-circle\"></i>:'Unpaid'}</td>\r\n                                <td>{order.customerMeta.name}</td>\r\n                                <td>{order.customerMeta.phone}</td>\r\n                                <td>{order.createdAt.substring(0,10)}</td>\r\n                                <td>₹{order.totalPrice}</td>\r\n                                \r\n                                <td>{order.paymentMethod}</td>\r\n                                <td>{order.cancelled?('Cancelled'):('Completed')}</td> \r\n                                <td><LinkContainer to={`/orderSummary/${order._id}`}>\r\n                                <Button className='btn-sm' variant='light'><i class=\"fas fa-info-circle\"></i></Button>\r\n                                    </LinkContainer>\r\n                                </td> \r\n                                {/* <td><Button className='btn-sm' variant='danger' onClick={cancelHandler(order)}>Cancel</Button></td>  */}\r\n                            </tr>\r\n                         \r\n                        \r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )}  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyOrderList","F:\\E-commerce\\client\\src\\Screens\\Checkout.js",["187"],"F:\\E-commerce\\client\\src\\Screens\\OrderSummary.js",["188","189","190"],"F:\\E-commerce\\client\\src\\Screens\\UserList.js",[],"F:\\E-commerce\\client\\src\\Screens\\DashboardMenu.js",[],"F:\\E-commerce\\client\\src\\Screens\\Dashboard.js",["191","192","193"],"import React, {useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col, Container, Card, Form, Button, Table } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom'\r\nimport Loader from '../Components/Loader';\r\nimport Message from '../Components/Message';\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { listEateryDetails} from '../actions/eateryActions'\r\nimport io from 'socket.io-client'\r\nimport { payOrder, completeOrder, cancelOrder, listMyOrders} from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET, ORDER_COMPLETED_RESET, ORDER_CANCEL_RESET } from '../constants/orderConstants';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\n\r\nlet socket\r\n\r\nconst Dashboard = ({history}) => {\r\n\r\n    // for all update work\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [phoneNumber, setPhoneNumber] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n    \r\n\r\n\r\n    const userDetails = useSelector((state) => state.userDetails)\r\n    const { loading, error, user } = userDetails \r\n    \r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const eateryDetails = useSelector(state => state.eateryDetails) \r\n    const {loading:loadingEatery, error: errorEatery} = eateryDetails\r\n\r\n\r\n    const  userUpdateProfile = useSelector(state => state.userUpdateProfile) \r\n    const { success, loading: updateLoading } = userUpdateProfile\r\n\r\n    const  orderListMy = useSelector(state => state.orderListMy) \r\n    const { loading: loadingOrders, error: errorOrders, orders  } = orderListMy\r\n    \r\n    const ENDPOINT ='localhost:5000'\r\n\r\n    const orderPay = useSelector((state) => state.orderPay)\r\n    const { order: orderPaid, loading: loadingPay, success: successPay, error: errorPay } = orderPay\r\n\r\n    const orderComplete = useSelector((state) => state.orderComplete)\r\n    const { order: orderCompleted, loading: loadingComplete, success: successComplete, error: errorComplete } = orderComplete\r\n\r\n    const orderCancel = useSelector((state) => state.orderCancel)\r\n    const { order: orderCancelled, loading: loadingCancel, success: successCancel, error: errorCancel } = orderCancel\r\n\r\n    useEffect(() => {\r\n        socket = io.connect(ENDPOINT, {reconnect: true})\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n        else{\r\n            if(!user.name || user.name!==userInfo.name){\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n            }\r\n            else{\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setPhoneNumber(user.phoneNumber)\r\n                dispatch(listEateryDetails(user.eatery))  \r\n            }\r\n        }\r\n        if(successPay){\r\n            const orderPaidId=orderPaid._id\r\n            socket.emit('paid', {orderPaidId})\r\n            dispatch(listMyOrders())\r\n            dispatch({ type: ORDER_PAY_RESET })  \r\n        }\r\n        else if(successCancel){\r\n            const orderCancelledId=orderCancelled._id\r\n            socket.emit('cancelled', {orderCancelledId})\r\n            dispatch(listMyOrders())\r\n            dispatch({ type: ORDER_CANCEL_RESET })\r\n        }\r\n        else if(successComplete){\r\n            const orderCompletedId=orderCompleted._id\r\n            socket.emit('completed', {orderCompletedId})\r\n            dispatch(listMyOrders())\r\n            dispatch({ type: ORDER_COMPLETED_RESET })\r\n        }\r\n        socket.on('customerPaidOrder', ({eateryIdforSocket})=>{\r\n            if(eateryIdforSocket===userInfo.eatery){\r\n              dispatch(listMyOrders())\r\n            }\r\n        }) \r\n        socket.on('refreshOrders', ()=>{\r\n              dispatch(listMyOrders())\r\n        }) \r\n        return () => {\r\n            //socket.emit('disconnect')\r\n            socket.off()\r\n        }\r\n    }, [dispatch, history, userInfo, user, success, ENDPOINT, successPay, successComplete, successCancel])\r\n\r\n    const submitHandler = (e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        if(password !== confirmPassword) {\r\n\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            // update profile\r\n            dispatch(updateUserProfile({id:user._id, name, email, phoneNumber, password}))\r\n        }\r\n\r\n    }\r\n\r\n    const payHandler = (order) =>{\r\n        dispatch(payOrder(order))\r\n    }\r\n\r\n    const cancelHandler = (order) =>{\r\n        dispatch(cancelOrder(order))\r\n    }\r\n\r\n    const completeHandler = (order) =>{\r\n        dispatch(completeOrder(order))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row><h1>Dashboard</h1></Row>\r\n            <Row>\r\n                <Col md={3}>\r\n                    { message && <Message variant='danger'>{ message }</Message>}\r\n                    { error && <Message variant='danger'>{ error }</Message>}\r\n                    { success && <Message variant='success'>Successfully Updated</Message>}\r\n                    { loading && <Loader />}\r\n                    { updateLoading && <Loader />}\r\n                    <Form onSubmit={submitHandler}>\r\n\r\n                        <Form.Group controlId='name'>\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Enter name'\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='email'>\r\n                            <Form.Label>Email Address</Form.Label>\r\n                            <Form.Control\r\n                                type='email'\r\n                                placeholder='Enter email'\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='phoneNumber'>\r\n                            <Form.Label>Phone Number</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Enter phone number'\r\n                                value={phoneNumber}\r\n                                onChange={(e) => setPhoneNumber(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='password'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control\r\n                                type='password'\r\n                                placeholder='Enter password'\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId='confirmPassword'>\r\n                            <Form.Label>Confirm password</Form.Label>\r\n                            <Form.Control\r\n                                type='password'\r\n                                placeholder='Enter confirm password'\r\n                                value={confirmPassword}\r\n                                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Button type='submit' variant='primary'>Update</Button>\r\n                    </Form>\r\n                </Col>\r\n                <Col md={9}>\r\n                    <Container className='py-3'>\r\n                        { errorEatery && <Message variant='danger'>{ errorEatery }</Message>}\r\n                        { loadingEatery && <Loader />}\r\n                        <Row>\r\n                            <Col>\r\n                                {userInfo && (\r\n                                    <Link to='/dashboardMenu'>\r\n                                        <Card style={{ height: '6rem', width: '10rem' }}>\r\n                                            <Card.Body>\r\n                                                <Card.Title> Menu </Card.Title>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Link>\r\n                                )}  \r\n                            </Col>\r\n                        \r\n                            <Col>\r\n                                <Link to='/feedback'>\r\n                                    <Card style={{ height: '6rem', width: '10rem' }}>\r\n                                        <Card.Body>\r\n                                            <Card.Title> Feedback </Card.Title>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Link>\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Link to='/myorders'>\r\n                                    <Card style={{ height: '6rem', width: '10rem' }}>\r\n                                        <Card.Body>\r\n                                            <Card.Title> Past Orders </Card.Title>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Link>\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Link to={{ pathname: `/admin/eatery/${user.eatery}/edit`}}>\r\n                                    <Card style={{ height: '6rem', width: '10rem' }}>\r\n                                        <Card.Body>\r\n                                            <Card.Title> Manage Eatery </Card.Title>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Link>\r\n                            </Col>\r\n                        </Row>\r\n                        <Container>\r\n                            {loadingOrders? <Loader /> : errorOrders? <Message variant='danger'>{errorOrders}</Message>:(\r\n                                <div>\r\n                                    <h2>Current Orders</h2>\r\n                                    { (loadingPay || loadingCancel || loadingComplete) && <Loader />}\r\n                                    { errorPay && <Message variant='danger'>{ errorPay }</Message>}\r\n                                    <Table striped bordered hover responsive className='table-sm'>\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>STATUS</th>\r\n                                            <th>NAME</th>\r\n                                            <th>PHONE</th>\r\n                                            <th>DATE</th>\r\n                                            <th>TOTAL</th>\r\n                                    \r\n                                            <th>MODE</th>\r\n                                            <th>COMPLETE</th>\r\n                                            <th>INFO</th>\r\n                                            <th></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {orders.map((order) => (\r\n                                                !order.completed?(\r\n                                                    <tr key={order._id}>\r\n                                                    <td>{order.paymentType===\"payNow\"?(\r\n                                                        order.isPaid?<i class=\"fas fa-check-circle\"></i>\r\n                                                        :<Button className='btn-sm' onClick={()=>payHandler(order)}>Paid</Button>\r\n                                                    ):\r\n                                                        (order.paymentMethod!=='null'?(\r\n                                                            order.isPaid?<i class=\"fas fa-check-circle\"></i>\r\n                                                            :<Button className='btn-sm' onClick={()=>payHandler(order)}>Paid</Button> \r\n                                                        ):(\r\n                                                            'Progress'\r\n                                                        ))}</td>\r\n                                                    {/* <td><Button className='btn-sm' onClick={()=>payHandler(order)}>Paid</Button></td> */}\r\n                                                    <td>{order.customerMeta.name}</td>\r\n                                                    <td>{order.customerMeta.phone}</td>\r\n                                                    <td>{order.createdAt.substring(0,10)}</td>\r\n                                                    <td>₹{order.totalPrice}</td>\r\n                                                    \r\n                                                    <td>{order.paymentMethod}</td>\r\n                                                    <td>{order.completed?'Completed':(<Button className='btn-sm' variant='success' disabled={!order.isPaid} onClick={()=>completeHandler(order)}>Complete</Button>)}</td> \r\n                                                    <td><LinkContainer to={`/orderSummary/${order._id}`}>\r\n                                                    <Button className='btn-sm' variant='light'><i class=\"fas fa-info-circle\"></i></Button>\r\n                                                        </LinkContainer>\r\n                                                    </td> \r\n                                                    <td>{order.cancelled?'Cancelled':(<Button className='btn-sm' variant='danger' disabled={order.isPaid} onClick={()=>cancelHandler(order)}>Cancel</Button>)}</td> \r\n                                                </tr>\r\n                                                ):(null)\r\n                                            \r\n                                            ))}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            )}\r\n                            \r\n                        </Container>\r\n                    </Container>\r\n                </Col>\r\n                \r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","F:\\E-commerce\\client\\src\\Screens\\EateryEdit.js",[],"F:\\E-commerce\\client\\src\\Components\\Message.js",[],"F:\\E-commerce\\client\\src\\Components\\Category.js",[],"F:\\E-commerce\\client\\src\\Components\\FormContainer.js",[],"F:\\E-commerce\\client\\src\\Components\\Review.js",[],"F:\\E-commerce\\client\\src\\constants\\userConstants.js",[],"F:\\E-commerce\\client\\src\\constants\\eateryConstants.js",[],"F:\\E-commerce\\client\\src\\Components\\Loader.js",[],"F:\\E-commerce\\client\\src\\actions\\userActions.js",[],"F:\\E-commerce\\client\\src\\actions\\eateryActions.js",["194"],"import  {\r\n    EATERY_LIST_REQUEST,\r\n    EATERY_LIST_SUCCESS,\r\n    EATERY_LIST_FAIL,\r\n    EATERY_DETAILS_REQUEST,\r\n    EATERY_DETAILS_SUCCESS,\r\n    EATERY_DETAILS_FAIL,\r\n    EATERY_DELETE_SUCCESS,\r\n    EATERY_DELETE_REQUEST,\r\n    EATERY_DELETE_FAIL,\r\n    EATERY_CREATE_REQUEST,\r\n    EATERY_CREATE_SUCCESS,\r\n    EATERY_CREATE_FAIL,\r\n    EATERY_UPDATE_REQUEST,\r\n    EATERY_UPDATE_SUCCESS,\r\n    EATERY_UPDATE_FAIL,\r\n    EATERY_REVIEWS_FAIL,\r\n    EATERY_REVIEWS_REQUEST,\r\n    EATERY_REVIEWS_SUCCESS,\r\n    EATERY_CREATE_REVIEW_FAIL,\r\n    EATERY_CREATE_REVIEW_REQUEST,\r\n    EATERY_CREATE_REVIEW_SUCCESS\r\n} from '../constants/eateryConstants'\r\nimport axios from 'axios'\r\nimport { logout } from './userActions'\r\n\r\nexport const listEateries = () => async(dispatch) => {\r\n    try {\r\n        dispatch({ type: EATERY_LIST_REQUEST})\r\n\r\n        const {data} = await axios.get('/api/eateries')\r\n\r\n        dispatch({\r\n            type: EATERY_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch(error){\r\n        dispatch({\r\n            type: EATERY_LIST_FAIL, \r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const listEateryDetails = (id) => async(dispatch) => {\r\n    try {\r\n        dispatch({ type: EATERY_DETAILS_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/eateries/${id}`)\r\n\r\n        dispatch({\r\n            type: EATERY_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch(error){\r\n        dispatch({\r\n            type: EATERY_DETAILS_FAIL, \r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const createEateryReview = (id, review) => async (dispatch, getState) => {\r\n  try {\r\n      dispatch({\r\n          type: EATERY_CREATE_REVIEW_REQUEST,\r\n      })\r\n\r\n      const {\r\n          userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n          headers: {\r\n              //Authorization: `Bearer ${userInfo.token}`,\r\n          },\r\n      }\r\n\r\n      await axios.post(`/api/eateries/${id}/reviews`, review, config)\r\n      \r\n      dispatch({\r\n          type: EATERY_CREATE_REVIEW_SUCCESS,\r\n      })\r\n  } catch (error) {\r\n      const message =\r\n      error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message\r\n      \r\n      dispatch({\r\n          type: EATERY_CREATE_REVIEW_FAIL,\r\n          payload: message,\r\n      })\r\n  }\r\n}\r\n\r\nexport const getEateryReviews = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: EATERY_REVIEWS_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.get(`/api/eateries/${id}/reviews`, config)\r\n        \r\n        console.log(data)\r\n        dispatch({\r\n            type: EATERY_REVIEWS_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        const message =\r\n        error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message\r\n        \r\n        dispatch({\r\n            type: EATERY_REVIEWS_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteEatery = (id) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: EATERY_DELETE_REQUEST,\r\n      })\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      }\r\n  \r\n      await axios.delete(`/api/eateries/${id}`, config)\r\n  \r\n      dispatch({\r\n        type: EATERY_DELETE_SUCCESS,\r\n      })\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message\r\n      if (message === 'Not authorized, token failed') {\r\n        dispatch(logout())\r\n      }\r\n      dispatch({\r\n        type: EATERY_DELETE_FAIL,\r\n        payload: message,\r\n      })\r\n    }\r\n  }\r\n  \r\n  export const createEatery = () => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: EATERY_CREATE_REQUEST,\r\n      })\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.post(`/api/eateries`, {}, config)\r\n  \r\n      dispatch({\r\n        type: EATERY_CREATE_SUCCESS,\r\n        payload: data,\r\n      })\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message\r\n      if (message === 'Not authorized, token failed') {\r\n        dispatch(logout())\r\n      }\r\n      dispatch({\r\n        type: EATERY_CREATE_FAIL,\r\n        payload: message,\r\n      })\r\n    }\r\n  }\r\n  \r\nexport const updateEatery = (eatery) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: EATERY_UPDATE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.put(`/api/eateries/${eatery._id}`,eatery,config)\r\n\r\n        dispatch({\r\n            type: EATERY_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n        dispatch({ type: EATERY_DETAILS_SUCCESS, payload: data })\r\n    } catch (error) {\r\n        const message =\r\n        error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: EATERY_UPDATE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}","F:\\E-commerce\\client\\src\\constants\\orderConstants.js",[],"F:\\E-commerce\\client\\src\\Components\\CheckoutSteps.js",[],"F:\\E-commerce\\client\\src\\constants\\cartConstants.js",[],"F:\\E-commerce\\client\\src\\actions\\orderActions.js",["195"],"F:\\E-commerce\\client\\src\\actions\\cartActions.js",[],"F:\\E-commerce\\client\\src\\Components\\Eatery.js",[],"F:\\E-commerce\\client\\src\\Components\\Item.js",["196","197"],"import { disable } from 'colors';\r\nimport '../index.css';\r\nimport React, {useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux' \r\nimport {Row,Button} from 'react-bootstrap'\r\nimport {addToCart} from '../actions/cartActions'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 10,\r\n      width: '100%'\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      margin: 'auto',\r\n      width: '90%',\r\n      height: 'auto',\r\n      backgroundColor: 'black',\r\n      color: 'white'\r\n      \r\n    },\r\n    image: {\r\n      width: 128,\r\n      height: 100,\r\n    },\r\n    img: {\r\n      margin: 'auto',\r\n      display: 'block',\r\n      maxWidth: '100%',\r\n      maxHeight: '100%',\r\n    },\r\n  }));\r\n\r\nconst Item = ({item,eateryDetailProp}) => {\r\n    \r\n    const cart = useSelector(state=>state.cart)\r\n    const {cartItems,eateryDetails}=cart\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles();\r\n    const handleClick = (quantity) =>{\r\n        \r\n        dispatch(addToCart(item,eateryDetailProp,quantity))\r\n    }\r\n    var existingQty=0\r\n    if(eateryDetails._id==eateryDetailProp._id){\r\n        const existItem  = cartItems.find(x=>x.product === item._id)\r\n        if(existItem){\r\n            existingQty=existItem.qty\r\n        }\r\n        \r\n\r\n    }\r\n    const [qty,setQty]=useState(existingQty)\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={2}>\r\n                <Grid item>\r\n                    \r\n                </Grid>\r\n                <Grid item xs={12} sm container>\r\n                    <Grid item xs container direction=\"column\" spacing={2}>\r\n                    <Grid item xs>\r\n                        <Typography gutterBottom>\r\n                        {item.name} <div class=\"badge badge-danger ml-2\">{item.isAvailable? null: 'Unavailable'}</div> \r\n                        </Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                        {item.description}\r\n                        </Typography>\r\n                        \r\n                    </Grid>\r\n                    \r\n                    </Grid>\r\n                    <Grid item>\r\n                    <Typography align='right' >₹{item.cost}</Typography>\r\n                    <Typography >\r\n                        <Row><Button className='mx-3' size='sm' onClick={()=> {\r\n                        setQty(qty-1)\r\n                        handleClick(qty-1)\r\n                        }} disabled={!eateryDetailProp.isOpen || qty<=0 || !item.isAvailable }>\r\n                            <i class=\"fas fa-chevron-left\"></i>\r\n                        </Button>\r\n                        \r\n                        <Typography>{qty}</Typography>\r\n                    \r\n                        <Button className='mx-3' size='sm' onClick={()=> {\r\n                            setQty(qty+1)\r\n                            handleClick(qty+1)\r\n                            }} disabled={!eateryDetailProp.isOpen || !item.isAvailable}>\r\n                                <i class=\"fas fa-chevron-right\"></i>\r\n                        </Button></Row>\r\n                        \r\n                    </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default Item;",{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":2,"column":8,"nodeType":"204","messageId":"205","endLine":2,"endColumn":16},{"ruleId":"202","severity":1,"message":"206","line":1,"column":223,"nodeType":"204","messageId":"205","endLine":1,"endColumn":244},{"ruleId":"202","severity":1,"message":"207","line":1,"column":27,"nodeType":"204","messageId":"205","endLine":1,"endColumn":35},{"ruleId":"202","severity":1,"message":"208","line":4,"column":38,"nodeType":"204","messageId":"205","endLine":4,"endColumn":42},{"ruleId":"202","severity":1,"message":"209","line":4,"column":44,"nodeType":"204","messageId":"205","endLine":4,"endColumn":50},{"ruleId":"202","severity":1,"message":"210","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":26},{"ruleId":"211","severity":1,"message":"212","line":61,"column":8,"nodeType":"213","endLine":61,"endColumn":78,"suggestions":"214"},{"ruleId":"202","severity":1,"message":"215","line":10,"column":17,"nodeType":"204","messageId":"205","endLine":10,"endColumn":26},{"ruleId":"202","severity":1,"message":"216","line":3,"column":10,"nodeType":"204","messageId":"205","endLine":3,"endColumn":14},{"ruleId":"211","severity":1,"message":"217","line":28,"column":8,"nodeType":"213","endLine":28,"endColumn":10,"suggestions":"218"},{"ruleId":"211","severity":1,"message":"219","line":26,"column":8,"nodeType":"213","endLine":26,"endColumn":10,"suggestions":"220"},{"ruleId":"202","severity":1,"message":"221","line":40,"column":18,"nodeType":"204","messageId":"205","endLine":40,"endColumn":31},{"ruleId":"202","severity":1,"message":"222","line":40,"column":40,"nodeType":"204","messageId":"205","endLine":40,"endColumn":51},{"ruleId":"211","severity":1,"message":"223","line":127,"column":6,"nodeType":"213","endLine":127,"endColumn":90,"suggestions":"224"},{"ruleId":"202","severity":1,"message":"225","line":53,"column":95,"nodeType":"204","messageId":"205","endLine":53,"endColumn":108},{"ruleId":"202","severity":1,"message":"226","line":56,"column":91,"nodeType":"204","messageId":"205","endLine":56,"endColumn":102},{"ruleId":"211","severity":1,"message":"227","line":105,"column":8,"nodeType":"213","endLine":105,"endColumn":106,"suggestions":"228"},{"ruleId":"202","severity":1,"message":"229","line":74,"column":24,"nodeType":"204","messageId":"205","endLine":74,"endColumn":32},{"ruleId":"202","severity":1,"message":"230","line":21,"column":3,"nodeType":"204","messageId":"205","endLine":21,"endColumn":21},{"ruleId":"202","severity":1,"message":"231","line":1,"column":10,"nodeType":"204","messageId":"205","endLine":1,"endColumn":17},{"ruleId":"232","severity":1,"message":"233","line":51,"column":25,"nodeType":"234","messageId":"235","endLine":51,"endColumn":27},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'ORDER_COMPLETED_RESET' is defined but never used.","'useState' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'order._id', and 'orderEditDetails._id'. Either include them or remove the dependency array.","ArrayExpression",["238"],"'Container' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'userInfo'. Either include them or remove the dependency array.",["239"],"React Hook useEffect has missing dependencies: 'dispatch' and 'eateryDetails._id'. Either include them or remove the dependency array.",["240"],"'eateryLoading' is assigned a value but never used.","'eateryError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["241"],"'errorComplete' is assigned a value but never used.","'errorCancel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orderCancelled._id', 'orderCompleted._id', and 'orderPaid._id'. Either include them or remove the dependency array.",["242"],"'userInfo' is assigned a value but never used.","'ORDER_LIST_REQUEST' is defined but never used.","'disable' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [history, customerMeta, success, eateryDetails, ENDPOINT, successEdit, order._id, dispatch, orderEditDetails._id]",{"range":"253","text":"254"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"255","text":"256"},"Update the dependencies array to be: [dispatch, eateryDetails._id]",{"range":"257","text":"258"},"Update the dependencies array to be: [dispatch, orderId, order, ENDPOINT, eatery, successPay, successEateryReview, redirect, history]",{"range":"259","text":"260"},"Update the dependencies array to be: [dispatch, history, userInfo, user, success, ENDPOINT, successPay, successComplete, successCancel, orderPaid._id, orderCancelled._id, orderCompleted._id]",{"range":"261","text":"262"},[2210,2280],"[history, customerMeta, success, eateryDetails, ENDPOINT, successEdit, order._id, dispatch, orderEditDetails._id]",[881,883],"[dispatch, history, userInfo]",[1024,1026],"[dispatch, eateryDetails._id]",[4159,4243],"[dispatch, orderId, order, ENDPOINT, eatery, successPay, successEateryReview, redirect, history]",[4126,4224],"[dispatch, history, userInfo, user, success, ENDPOINT, successPay, successComplete, successCancel, orderPaid._id, orderCancelled._id, orderCompleted._id]"]